{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Charty Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily conjure beautiful and interactive charts for your applications, much like a wizard casting spells in the world of Harry Potter\ud83d\udcdc\ud83d\udd2e. Getting Started Version Catalog If you're using Version Catalog, you can configure the dependency by adding it to your libs.versions.toml file as follows: [versions] #... charty = \"<version>\" [libraries] #... charty = { module = \"com.himanshoe:charty\", version.ref = \"charty\" } Gradle Add the dependency below to your module 's build.gradle.kts file: dependencies { implementation(\"com.himanshoe:charty:$version\") // if you're using Version Catalog implementation(libs.charty) } For Kotlin Multiplatform, add the dependency below to your commonMain source set's build.gradle.kts file: sourceSets { commonMain.dependencies { implementation(libs.charty) } } Find the latest release version here","title":"Home"},{"location":"#charty","text":"Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily conjure beautiful and interactive charts for your applications, much like a wizard casting spells in the world of Harry Potter\ud83d\udcdc\ud83d\udd2e.","title":"Charty"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#version-catalog","text":"If you're using Version Catalog, you can configure the dependency by adding it to your libs.versions.toml file as follows: [versions] #... charty = \"<version>\" [libraries] #... charty = { module = \"com.himanshoe:charty\", version.ref = \"charty\" }","title":"Version Catalog"},{"location":"#gradle","text":"Add the dependency below to your module 's build.gradle.kts file: dependencies { implementation(\"com.himanshoe:charty:$version\") // if you're using Version Catalog implementation(libs.charty) } For Kotlin Multiplatform, add the dependency below to your commonMain source set's build.gradle.kts file: sourceSets { commonMain.dependencies { implementation(libs.charty) } } Find the latest release version here","title":"Gradle"},{"location":"charts/bar_chart/","text":"Bar Chart Overview A highly customizable and interactive bar chart Composable designed for displaying a list of bars with optional target indicators, tooltips, and click interactions. This component is flexible enough to be used in dashboards, analytical tools, or any visual data representation context in a Jetpack Compose application. \ud83d\udce6 Package import com.himanshoe.charty.bar \ud83e\uddf1 Declaration @Composable fun BarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barTooltip: BarTooltip? = null, barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<BarData> A lambda returning the list of BarData entries to be displayed in the chart. The list determines the number and height of bars. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. target Float? Optional float value indicating a target or benchmark line to be displayed across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration for the appearance of the target line, such as color, stroke, and label visibility. Use TargetConfig.default() for default styling. barChartConfig BarChartConfig Governs bar spacing, corner radius, chart padding, and other display properties. Customize using BarChartConfig . labelConfig LabelConfig Controls how labels for each bar are rendered (font size, visibility, position, etc.). barTooltip BarTooltip? Optional tooltip configuration shown on long-press or hover over a bar. Set to null to disable tooltips. barChartColorConfig BarChartColorConfig Specifies the color scheme for bars, labels, backgrounds, and the target line. Use BarChartColorConfig.default() for standard colors. onBarClick (Int, BarData) -> Unit Lambda called when a bar is clicked. Provides the index of the bar and the corresponding BarData . Default is a no-op. \ud83e\uddee BarData Model Property Type Description yValue Float The numeric value to be plotted on the y-axis . This determines the height of the bar. xValue Any The corresponding value for the x-axis . It can represent a label, date, or category and can be of any type. barColor ChartColor The fill color of the bar. Defaults to Color.Unspecified converted to SolidChartColor . barBackgroundColor ChartColor The background color behind the filled portion of the bar, typically used to indicate the max range or to add contrast. Defaults to a semi-transparent light gray ( #40D3D3D3 ). You can find a mock implementation in sample module's App file Example Usage private fun LazyListScope.addBarChart(target: Float?, data: List<BarData>) { item { BarChart( modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), target = target, barTooltip = BarTooltip.GraphTop, labelConfig = LabelConfig.default().copy( showXLabel = true, xAxisCharCount = 4, showYLabel = true, textColor = Color.Black.asSolidChartColor() ), barChartColorConfig = BarChartColorConfig.default().copy( fillBarColor = Color(0xFFFF92C1).asSolidChartColor(), negativeBarColors = Color(0xFF4D4D4D).asSolidChartColor() ), data = { data }, barChartConfig = BarChartConfig.default().copy( cornerRadius = CornerRadius(40F, 40F), ), onBarClick = { index, barData -> println(\"click in bar with $index index and data $barData\") } ) } }","title":"Bar Chart"},{"location":"charts/bar_chart/#bar-chart","text":"","title":"Bar Chart"},{"location":"charts/bar_chart/#overview","text":"A highly customizable and interactive bar chart Composable designed for displaying a list of bars with optional target indicators, tooltips, and click interactions. This component is flexible enough to be used in dashboards, analytical tools, or any visual data representation context in a Jetpack Compose application.","title":"Overview"},{"location":"charts/bar_chart/#package","text":"import com.himanshoe.charty.bar","title":"\ud83d\udce6 Package"},{"location":"charts/bar_chart/#declaration","text":"@Composable fun BarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barTooltip: BarTooltip? = null, barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/bar_chart/#parameters","text":"Parameter Type Description data () -> List<BarData> A lambda returning the list of BarData entries to be displayed in the chart. The list determines the number and height of bars. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. target Float? Optional float value indicating a target or benchmark line to be displayed across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration for the appearance of the target line, such as color, stroke, and label visibility. Use TargetConfig.default() for default styling. barChartConfig BarChartConfig Governs bar spacing, corner radius, chart padding, and other display properties. Customize using BarChartConfig . labelConfig LabelConfig Controls how labels for each bar are rendered (font size, visibility, position, etc.). barTooltip BarTooltip? Optional tooltip configuration shown on long-press or hover over a bar. Set to null to disable tooltips. barChartColorConfig BarChartColorConfig Specifies the color scheme for bars, labels, backgrounds, and the target line. Use BarChartColorConfig.default() for standard colors. onBarClick (Int, BarData) -> Unit Lambda called when a bar is clicked. Provides the index of the bar and the corresponding BarData . Default is a no-op.","title":"\ud83d\udd27 Parameters"},{"location":"charts/bar_chart/#bardata-model","text":"Property Type Description yValue Float The numeric value to be plotted on the y-axis . This determines the height of the bar. xValue Any The corresponding value for the x-axis . It can represent a label, date, or category and can be of any type. barColor ChartColor The fill color of the bar. Defaults to Color.Unspecified converted to SolidChartColor . barBackgroundColor ChartColor The background color behind the filled portion of the bar, typically used to indicate the max range or to add contrast. Defaults to a semi-transparent light gray ( #40D3D3D3 ). You can find a mock implementation in sample module's App file","title":"\ud83e\uddee BarData Model"},{"location":"charts/bar_chart/#example-usage","text":"private fun LazyListScope.addBarChart(target: Float?, data: List<BarData>) { item { BarChart( modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), target = target, barTooltip = BarTooltip.GraphTop, labelConfig = LabelConfig.default().copy( showXLabel = true, xAxisCharCount = 4, showYLabel = true, textColor = Color.Black.asSolidChartColor() ), barChartColorConfig = BarChartColorConfig.default().copy( fillBarColor = Color(0xFFFF92C1).asSolidChartColor(), negativeBarColors = Color(0xFF4D4D4D).asSolidChartColor() ), data = { data }, barChartConfig = BarChartConfig.default().copy( cornerRadius = CornerRadius(40F, 40F), ), onBarClick = { index, barData -> println(\"click in bar with $index index and data $barData\") } ) } }","title":"Example Usage"},{"location":"charts/circle_chart/","text":"Circle Chart Overview A customizable and interactive circle chart (like Apple tracking) used for visualizing proportions or segments of a dataset. \ud83d\udce6 Package import com.himanshoe.charty.circle \ud83e\uddf1 Declaration @Composable fun CircleChart( data: () -> List<CircleData>, modifier: Modifier = Modifier, circleChartConfig: CircleChartConfig = CircleChartConfig.default(), onCircleClick: (CircleData) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<CircleData> A lambda returning the list of CircleData objects to be displayed in the chart. Each data entry defines a segment's value and appearance. modifier Modifier Optional Compose Modifier to customize layout, size, padding, alignment, etc. circleChartConfig CircleChartConfig Chart appearance and layout configuration (e.g. stroke width, spacing, animation, inner radius). Defaults to CircleChartConfig.default() . onCircleClick (CircleData) -> Unit Lambda that is invoked when a segment of the chart is clicked. Provides the corresponding CircleData item. Default is a no-op. \ud83e\uddee CircleData Model data class CircleData( val value: Float, val color: ChartColor, val trackColor: ChartColor = color.value.fastMap { it.copy(alpha = 0.5F) }.asGradientChartColor(), val label: String, ) Property Type Description value Float The numeric value representing the size of the slice. This value is used to calculate the angle of the slice relative to the sum of all values. color ChartColor The main color used to fill the slice. Should be visually distinct for each segment. trackColor ChartColor A secondary, typically lighter or semi-transparent version of the main color. It can be used for rendering background rings, shadows, or hover states. Defaults to a gradient based on the main color with reduced alpha (50%). label String The label or description of the slice. Useful for legends or tooltips. You can find a mock implementation in sample module's App file Example Usage val chartItems = listOf( CircleData(value = 40f, label = \"Food\", color = Color.Red.asSolidChartColor()), CircleData(value = 30f, label = \"Transport\", color = Color.Blue.asSolidChartColor()), CircleData(value = 30f, label = \"Others\", color = Color.Green.asSolidChartColor()) ) CircleChart( data = { chartItems }, modifier = Modifier.size(200.dp), onCircleClick = { segment -> println(\"Clicked on: ${segment.label} (${segment.value})\") } )","title":"Circle Chart"},{"location":"charts/circle_chart/#circle-chart","text":"","title":"Circle Chart"},{"location":"charts/circle_chart/#overview","text":"A customizable and interactive circle chart (like Apple tracking) used for visualizing proportions or segments of a dataset.","title":"Overview"},{"location":"charts/circle_chart/#package","text":"import com.himanshoe.charty.circle","title":"\ud83d\udce6 Package"},{"location":"charts/circle_chart/#declaration","text":"@Composable fun CircleChart( data: () -> List<CircleData>, modifier: Modifier = Modifier, circleChartConfig: CircleChartConfig = CircleChartConfig.default(), onCircleClick: (CircleData) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/circle_chart/#parameters","text":"Parameter Type Description data () -> List<CircleData> A lambda returning the list of CircleData objects to be displayed in the chart. Each data entry defines a segment's value and appearance. modifier Modifier Optional Compose Modifier to customize layout, size, padding, alignment, etc. circleChartConfig CircleChartConfig Chart appearance and layout configuration (e.g. stroke width, spacing, animation, inner radius). Defaults to CircleChartConfig.default() . onCircleClick (CircleData) -> Unit Lambda that is invoked when a segment of the chart is clicked. Provides the corresponding CircleData item. Default is a no-op.","title":"\ud83d\udd27 Parameters"},{"location":"charts/circle_chart/#circledata-model","text":"data class CircleData( val value: Float, val color: ChartColor, val trackColor: ChartColor = color.value.fastMap { it.copy(alpha = 0.5F) }.asGradientChartColor(), val label: String, ) Property Type Description value Float The numeric value representing the size of the slice. This value is used to calculate the angle of the slice relative to the sum of all values. color ChartColor The main color used to fill the slice. Should be visually distinct for each segment. trackColor ChartColor A secondary, typically lighter or semi-transparent version of the main color. It can be used for rendering background rings, shadows, or hover states. Defaults to a gradient based on the main color with reduced alpha (50%). label String The label or description of the slice. Useful for legends or tooltips. You can find a mock implementation in sample module's App file","title":"\ud83e\uddee CircleData Model"},{"location":"charts/circle_chart/#example-usage","text":"val chartItems = listOf( CircleData(value = 40f, label = \"Food\", color = Color.Red.asSolidChartColor()), CircleData(value = 30f, label = \"Transport\", color = Color.Blue.asSolidChartColor()), CircleData(value = 30f, label = \"Others\", color = Color.Green.asSolidChartColor()) ) CircleChart( data = { chartItems }, modifier = Modifier.size(200.dp), onCircleClick = { segment -> println(\"Clicked on: ${segment.label} (${segment.value})\") } )","title":"Example Usage"},{"location":"charts/comparison_bar_chart/","text":"ComparisonBarChart A chart that displays a grouped bar chart for comparing multiple values across common categories (e.g., monthly comparisons for different products, users, or metrics). Each group represents a category and contains multiple bars to compare distinct values within that group. \ud83e\uddf1 Declaration @Composable fun ComparisonBarChart( data: () -> List<ComparisonBarData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), comparisonBarChartConfig: ComparisonBarChartConfig = ComparisonBarChartConfig.default(), onGroupClicked: (Int) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<ComparisonBarData> A lambda that returns a list of ComparisonBarData items. Each item defines a group with one or more bars for comparison. modifier Modifier Compose Modifier to control layout, padding, size, or drawing behavior. labelConfig LabelConfig Configuration for the X-axis and Y-axis labels, including font size, color, alignment, etc. comparisonBarChartConfig ComparisonBarChartConfig Defines visual properties and behavior of the grouped bar chart like bar spacing, animation, alignment, max value, etc. onGroupClicked (Int) -> Unit Callback triggered when a group (set of bars) is clicked. Receives the index of the clicked group. Useful for interactivity or detail views. \ud83d\udcca ComparisonBarData Model A data class representing a single group in a comparison bar chart. Each group corresponds to a label (e.g., a category or time period) and contains multiple bars with individual values and colors for comparison within that group. data class ComparisonBarData( val label: String, val bars: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label representing the group on the X-axis. Common examples include month names, category names, or dates. bars List<Float> A list of Float values representing the height of each bar in the group. The number of values in this list determines how many bars are shown for the group. colors List<ChartColor> A list of ChartColor values that define the fill color for each corresponding bar in the bars list. Should match the size of bars for consistent rendering. \ud83d\udca1 Example val chartData = listOf( ComparisonBarData( label = \"Jan\", bars = listOf( BarData(yValue = 50f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 75f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ), ComparisonBarData( label = \"Feb\", bars = listOf( BarData(yValue = 60f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 85f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ) ) ComparisonBarChart( data = { chartData }, modifier = Modifier.fillMaxWidth(), onGroupClicked = { index -> } )","title":"Comparison Bar Chart"},{"location":"charts/comparison_bar_chart/#comparisonbarchart","text":"A chart that displays a grouped bar chart for comparing multiple values across common categories (e.g., monthly comparisons for different products, users, or metrics). Each group represents a category and contains multiple bars to compare distinct values within that group.","title":"ComparisonBarChart"},{"location":"charts/comparison_bar_chart/#declaration","text":"@Composable fun ComparisonBarChart( data: () -> List<ComparisonBarData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), comparisonBarChartConfig: ComparisonBarChartConfig = ComparisonBarChartConfig.default(), onGroupClicked: (Int) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/comparison_bar_chart/#parameters","text":"Parameter Type Description data () -> List<ComparisonBarData> A lambda that returns a list of ComparisonBarData items. Each item defines a group with one or more bars for comparison. modifier Modifier Compose Modifier to control layout, padding, size, or drawing behavior. labelConfig LabelConfig Configuration for the X-axis and Y-axis labels, including font size, color, alignment, etc. comparisonBarChartConfig ComparisonBarChartConfig Defines visual properties and behavior of the grouped bar chart like bar spacing, animation, alignment, max value, etc. onGroupClicked (Int) -> Unit Callback triggered when a group (set of bars) is clicked. Receives the index of the clicked group. Useful for interactivity or detail views.","title":"\ud83d\udd27 Parameters"},{"location":"charts/comparison_bar_chart/#comparisonbardata-model","text":"A data class representing a single group in a comparison bar chart. Each group corresponds to a label (e.g., a category or time period) and contains multiple bars with individual values and colors for comparison within that group. data class ComparisonBarData( val label: String, val bars: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label representing the group on the X-axis. Common examples include month names, category names, or dates. bars List<Float> A list of Float values representing the height of each bar in the group. The number of values in this list determines how many bars are shown for the group. colors List<ChartColor> A list of ChartColor values that define the fill color for each corresponding bar in the bars list. Should match the size of bars for consistent rendering.","title":"\ud83d\udcca ComparisonBarData Model"},{"location":"charts/comparison_bar_chart/#example","text":"val chartData = listOf( ComparisonBarData( label = \"Jan\", bars = listOf( BarData(yValue = 50f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 75f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ), ComparisonBarData( label = \"Feb\", bars = listOf( BarData(yValue = 60f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 85f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ) ) ComparisonBarChart( data = { chartData }, modifier = Modifier.fillMaxWidth(), onGroupClicked = { index -> } )","title":"\ud83d\udca1 Example"},{"location":"charts/horizontal_bar_chart/","text":"HorizontalBarChart a A chart that displays a horizontal bar chart , where each bar extends horizontally based on its data value. This layout is ideal when category labels are long or when you want to emphasize value comparisons along a vertical list. \ud83e\uddf1 Declaration @Composable fun HorizontalBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, barChartConfig: BarChartConfig = BarChartConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), horizontalBarLabelConfig: HorizontalBarLabelConfig = HorizontalBarLabelConfig.default(), onBarClick: (BarData) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<BarData> A lambda that returns the list of BarData entries to be displayed as horizontal bars. Each BarData contains the Y-value (bar length) and X-value (label/key). modifier Modifier Compose Modifier for layout control, sizing, padding, or other UI decorations. barChartConfig BarChartConfig Configuration object for chart behavior and layout \u2014 such as minimum number of bars, axis and grid visibility, animation, and spacing. barChartColorConfig BarChartColorConfig Defines color-related customization for bars, axis lines, grid lines, and background. horizontalBarLabelConfig HorizontalBarLabelConfig Styling and layout configuration for the labels displayed alongside the horizontal bars, such as text color, size, alignment, and optional background. onBarClick (BarData) -> Unit Callback function invoked when a bar is clicked. Receives the corresponding BarData item for further action (e.g., navigation, tooltip, etc.). \ud83d\udcca Data Model Each bar is represented using the BarData class: data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), ) \ud83d\udd20 HorizontalBarLabelConfig The horizontalBarLabelConfig parameter lets you customize how the labels for each horizontal bar are rendered. data class HorizontalBarLabelConfig( val showLabel: Boolean, val hasOverlappingLabel: Boolean, val textColor: ChartColor, val textBackgroundColors: ChartColor, val xAxisCharCount: Int?, val labelTextStyle: TextStyle?, ) If labels are not shown, users can drag their finger or scroll across the chart to reveal labels dynamically via gesture detection. This allows clean visualizations by default, but still gives access to detailed information on demand. Property Type Description showLabel Boolean Determines whether the label for each horizontal bar should be shown by default. If false , labels are hidden unless revealed through gestures (e.g. dragging). hasOverlappingLabel Boolean Indicates whether labels are allowed to overlap with each other. If true , labels may render over each other in dense datasets. textColor ChartColor The color of the label text. You can use solid or gradient chart colors. textBackgroundColors ChartColor Background color behind the label text. Useful for adding contrast or highlighting the label. xAxisCharCount Int? Optionally limits the number of characters shown from the X-axis label. Useful for truncation in narrow layouts. If null , no truncation is applied. labelTextStyle TextStyle? Custom styling for label text (e.g., font size, weight, family, line height). If null , defaults are used. \ud83d\udca1 Example Usage val performanceData = listOf( BarData(yValue = 80f, xValue = \"Alice\"), BarData(yValue = 65f, xValue = \"Bob\"), BarData(yValue = 90f, xValue = \"Charlie\") ) HorizontalBarChart( data = { performanceData }, modifier = Modifier.fillMaxWidth(), onBarClick = { bar -> println(\"Clicked on ${bar.xValue} with value ${bar.yValue}\") } )","title":"Horizontal Bar Chart"},{"location":"charts/horizontal_bar_chart/#horizontalbarchart","text":"a A chart that displays a horizontal bar chart , where each bar extends horizontally based on its data value. This layout is ideal when category labels are long or when you want to emphasize value comparisons along a vertical list.","title":"HorizontalBarChart"},{"location":"charts/horizontal_bar_chart/#declaration","text":"@Composable fun HorizontalBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, barChartConfig: BarChartConfig = BarChartConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), horizontalBarLabelConfig: HorizontalBarLabelConfig = HorizontalBarLabelConfig.default(), onBarClick: (BarData) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/horizontal_bar_chart/#parameters","text":"Parameter Type Description data () -> List<BarData> A lambda that returns the list of BarData entries to be displayed as horizontal bars. Each BarData contains the Y-value (bar length) and X-value (label/key). modifier Modifier Compose Modifier for layout control, sizing, padding, or other UI decorations. barChartConfig BarChartConfig Configuration object for chart behavior and layout \u2014 such as minimum number of bars, axis and grid visibility, animation, and spacing. barChartColorConfig BarChartColorConfig Defines color-related customization for bars, axis lines, grid lines, and background. horizontalBarLabelConfig HorizontalBarLabelConfig Styling and layout configuration for the labels displayed alongside the horizontal bars, such as text color, size, alignment, and optional background. onBarClick (BarData) -> Unit Callback function invoked when a bar is clicked. Receives the corresponding BarData item for further action (e.g., navigation, tooltip, etc.).","title":"\ud83d\udd27 Parameters"},{"location":"charts/horizontal_bar_chart/#data-model","text":"Each bar is represented using the BarData class: data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), )","title":"\ud83d\udcca Data Model"},{"location":"charts/horizontal_bar_chart/#horizontalbarlabelconfig","text":"The horizontalBarLabelConfig parameter lets you customize how the labels for each horizontal bar are rendered. data class HorizontalBarLabelConfig( val showLabel: Boolean, val hasOverlappingLabel: Boolean, val textColor: ChartColor, val textBackgroundColors: ChartColor, val xAxisCharCount: Int?, val labelTextStyle: TextStyle?, ) If labels are not shown, users can drag their finger or scroll across the chart to reveal labels dynamically via gesture detection. This allows clean visualizations by default, but still gives access to detailed information on demand. Property Type Description showLabel Boolean Determines whether the label for each horizontal bar should be shown by default. If false , labels are hidden unless revealed through gestures (e.g. dragging). hasOverlappingLabel Boolean Indicates whether labels are allowed to overlap with each other. If true , labels may render over each other in dense datasets. textColor ChartColor The color of the label text. You can use solid or gradient chart colors. textBackgroundColors ChartColor Background color behind the label text. Useful for adding contrast or highlighting the label. xAxisCharCount Int? Optionally limits the number of characters shown from the X-axis label. Useful for truncation in narrow layouts. If null , no truncation is applied. labelTextStyle TextStyle? Custom styling for label text (e.g., font size, weight, family, line height). If null , defaults are used.","title":"\ud83d\udd20 HorizontalBarLabelConfig"},{"location":"charts/horizontal_bar_chart/#example-usage","text":"val performanceData = listOf( BarData(yValue = 80f, xValue = \"Alice\"), BarData(yValue = 65f, xValue = \"Bob\"), BarData(yValue = 90f, xValue = \"Charlie\") ) HorizontalBarChart( data = { performanceData }, modifier = Modifier.fillMaxWidth(), onBarClick = { bar -> println(\"Clicked on ${bar.xValue} with value ${bar.yValue}\") } )","title":"\ud83d\udca1 Example Usage"},{"location":"charts/line_bar_chart/","text":"Line Bar Chart Overview The LineBarChart composable offers a distinct visual style for representing categorical data, rendering data points as thin vertical lines or \"sticks\" rather than traditional wider bars. This presentation is achieved by internally adjusting the bar width (typically dividing the available space by 3). Key characteristics and use cases: - Stylistic Variation : While it uses the same BarData structure and shares many configuration options ( BarChartConfig , BarChartColorConfig , LabelConfig ) with the standard BarChart , its visual output is slender lines. - Discrete Data Points : Ideal for visualizing discrete data points where the emphasis is on the magnitude at each specific point along the X-axis. - High-Density Data : Useful when dealing with a large number of data points where traditional bars might appear cluttered. The thinner lines allow for a cleaner representation. - Features : Supports features like positive/negative values (drawn from a central axis if mixed), target lines, axis/grid customization, and click interactions ( onBarClick ). Think of it as a bar chart that has been stylistically modified to appear as lines, making it suitable for scenarios where a less \"heavy\" visual representation is preferred. Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineBarChart() { val lineBarDataPoints = listOf( BarData(xValue = \"Jan\", yValue = 180f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = -120f, color = Color.Blue.asSolidChartColor()), // Negative value example BarData(xValue = \"Mar\", yValue = 220f, color = Color.Green.asSolidChartColor()), BarData(xValue = \"Apr\", yValue = 150f, color = Color.Magenta.asSolidChartColor()), BarData(xValue = \"May\", yValue = 250f, color = Color.Yellow.asSolidChartColor()), BarData(xValue = \"Jun\", yValue = -90f, color = Color.Cyan.asSolidChartColor()) ) LineBarChart( data = { lineBarDataPoints }, modifier = Modifier .height(300.dp) .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = false, // Curves might not be prominent on thin lines but can be enabled drawNegativeValueChart = true, // Important for handling negative values correctly showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // You can set a default fill color here, or rely on colors in BarData // fillBarColor = Color.DarkGray.asSolidChartColor(), axisLineColor = Color.Gray.asSolidChartColor() ), onBarClick = { index, barData -> println(\"Clicked LineBar: ${barData.xValue} (${barData.yValue}), Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineBarChartPreview() { SampleLineBarChart() } Screenshots Usage The LineBarChart utilizes the same data structures and configuration objects as the standard BarChart . Refer to the BarChart documentation for detailed explanations of these parameters. Below is a summary: data : A lambda function returning a list of BarData . Each BarData defines a line's X-position, Y-height, and color. xValue: Any : Category label for the X-axis. yValue: Float : Numerical value for the Y-axis (height of the line). color: ChartColor : Color of the individual line. barBackgroundColor: ChartColor : (Optional) Background color for the line's track. modifier : Modifier for layout customization. (Optional) target : Optional Float for displaying a horizontal target line. (Optional) targetConfig : TargetConfig for the target line's appearance. (Optional, defaults to TargetConfig.default() ) barChartConfig : BarChartConfig for general chart settings. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : Applies rounding to the top of the thin lines. drawNegativeValueChart: Boolean : Enables rendering of negative values from a central axis. showAxisLines: Boolean , showGridLines: Boolean : Control visibility of axis and grid lines. labelConfig : LabelConfig for X and Y axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig : BarChartColorConfig for default colors of lines, axis, and grid. Individual line colors in BarData take precedence. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : Lambda (Int, BarData) -> Unit invoked when a line is clicked. (Optional) The primary distinction from BarChart is the visual rendering of data points as thin lines due to an internal adjustment of bar width.","title":"Line Bar Chart"},{"location":"charts/line_bar_chart/#line-bar-chart","text":"","title":"Line Bar Chart"},{"location":"charts/line_bar_chart/#overview","text":"The LineBarChart composable offers a distinct visual style for representing categorical data, rendering data points as thin vertical lines or \"sticks\" rather than traditional wider bars. This presentation is achieved by internally adjusting the bar width (typically dividing the available space by 3). Key characteristics and use cases: - Stylistic Variation : While it uses the same BarData structure and shares many configuration options ( BarChartConfig , BarChartColorConfig , LabelConfig ) with the standard BarChart , its visual output is slender lines. - Discrete Data Points : Ideal for visualizing discrete data points where the emphasis is on the magnitude at each specific point along the X-axis. - High-Density Data : Useful when dealing with a large number of data points where traditional bars might appear cluttered. The thinner lines allow for a cleaner representation. - Features : Supports features like positive/negative values (drawn from a central axis if mixed), target lines, axis/grid customization, and click interactions ( onBarClick ). Think of it as a bar chart that has been stylistically modified to appear as lines, making it suitable for scenarios where a less \"heavy\" visual representation is preferred.","title":"Overview"},{"location":"charts/line_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineBarChart() { val lineBarDataPoints = listOf( BarData(xValue = \"Jan\", yValue = 180f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = -120f, color = Color.Blue.asSolidChartColor()), // Negative value example BarData(xValue = \"Mar\", yValue = 220f, color = Color.Green.asSolidChartColor()), BarData(xValue = \"Apr\", yValue = 150f, color = Color.Magenta.asSolidChartColor()), BarData(xValue = \"May\", yValue = 250f, color = Color.Yellow.asSolidChartColor()), BarData(xValue = \"Jun\", yValue = -90f, color = Color.Cyan.asSolidChartColor()) ) LineBarChart( data = { lineBarDataPoints }, modifier = Modifier .height(300.dp) .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = false, // Curves might not be prominent on thin lines but can be enabled drawNegativeValueChart = true, // Important for handling negative values correctly showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // You can set a default fill color here, or rely on colors in BarData // fillBarColor = Color.DarkGray.asSolidChartColor(), axisLineColor = Color.Gray.asSolidChartColor() ), onBarClick = { index, barData -> println(\"Clicked LineBar: ${barData.xValue} (${barData.yValue}), Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineBarChartPreview() { SampleLineBarChart() }","title":"Sample Invocation"},{"location":"charts/line_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/line_bar_chart/#usage","text":"The LineBarChart utilizes the same data structures and configuration objects as the standard BarChart . Refer to the BarChart documentation for detailed explanations of these parameters. Below is a summary: data : A lambda function returning a list of BarData . Each BarData defines a line's X-position, Y-height, and color. xValue: Any : Category label for the X-axis. yValue: Float : Numerical value for the Y-axis (height of the line). color: ChartColor : Color of the individual line. barBackgroundColor: ChartColor : (Optional) Background color for the line's track. modifier : Modifier for layout customization. (Optional) target : Optional Float for displaying a horizontal target line. (Optional) targetConfig : TargetConfig for the target line's appearance. (Optional, defaults to TargetConfig.default() ) barChartConfig : BarChartConfig for general chart settings. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : Applies rounding to the top of the thin lines. drawNegativeValueChart: Boolean : Enables rendering of negative values from a central axis. showAxisLines: Boolean , showGridLines: Boolean : Control visibility of axis and grid lines. labelConfig : LabelConfig for X and Y axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig : BarChartColorConfig for default colors of lines, axis, and grid. Individual line colors in BarData take precedence. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : Lambda (Int, BarData) -> Unit invoked when a line is clicked. (Optional) The primary distinction from BarChart is the visual rendering of data points as thin lines due to an internal adjustment of bar width.","title":"Usage"},{"location":"charts/line_chart/","text":"Line Chart Overview A composable function that renders a line chart. Line charts are used to display quantitative values over a continuous interval or time period. They are ideal for showing trends in data at equal intervals. Usage Key parameters for using this chart: data : A lambda function that returns a list of LineData . Each LineData object represents a point on the line and should contain: xValue : The value for the X-axis (e.g., a timestamp, category index). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the LineChart. (Optional) smoothLineCurve : A Boolean indicating whether the line connecting data points should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath the line should be filled with a color. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the line itself should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. showOnClickBar : A Boolean that, if true, displays a vertical bar highlighting the selected data point when the chart is clicked. (Optional, defaults to true ) colorConfig : A LineChartColorConfig object for configuring the colors of: lineColor : The color of the line stroke. lineFillColor : The color of the filled area beneath the line (if showFilledArea is true). selectionBarColor : The color of the vertical bar shown on click (if showOnClickBar is true). (Optional, defaults to LineChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations, such as: lineConfig : Settings for showing values directly on the line. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). (Optional, defaults to LineChartConfig() ) onClick : A lambda function that is invoked when a data point area on the line chart is clicked. It receives the LineData corresponding to the clicked point. (Optional) The chart also supports an alternative interaction mode via a different overload, where a tooltip can be shown by long-pressing and dragging on the chart, configured through chartConfig.interactionTooltipConfig .","title":"Line Chart"},{"location":"charts/line_chart/#line-chart","text":"","title":"Line Chart"},{"location":"charts/line_chart/#overview","text":"A composable function that renders a line chart. Line charts are used to display quantitative values over a continuous interval or time period. They are ideal for showing trends in data at equal intervals.","title":"Overview"},{"location":"charts/line_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of LineData . Each LineData object represents a point on the line and should contain: xValue : The value for the X-axis (e.g., a timestamp, category index). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the LineChart. (Optional) smoothLineCurve : A Boolean indicating whether the line connecting data points should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath the line should be filled with a color. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the line itself should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. showOnClickBar : A Boolean that, if true, displays a vertical bar highlighting the selected data point when the chart is clicked. (Optional, defaults to true ) colorConfig : A LineChartColorConfig object for configuring the colors of: lineColor : The color of the line stroke. lineFillColor : The color of the filled area beneath the line (if showFilledArea is true). selectionBarColor : The color of the vertical bar shown on click (if showOnClickBar is true). (Optional, defaults to LineChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations, such as: lineConfig : Settings for showing values directly on the line. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). (Optional, defaults to LineChartConfig() ) onClick : A lambda function that is invoked when a data point area on the line chart is clicked. It receives the LineData corresponding to the clicked point. (Optional) The chart also supports an alternative interaction mode via a different overload, where a tooltip can be shown by long-pressing and dragging on the chart, configured through chartConfig.interactionTooltipConfig .","title":"Usage"},{"location":"charts/line_stack_bar_chart/","text":"Line Stacked Bar Chart Overview The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This \"line\" appearance is achieved by internally making the bars narrower. Key characteristics and use cases: - Segmented Line Stacks : Each data point on the X-axis is represented by a single thin vertical line, which is itself segmented to show the constituent parts of a total. - Composition Over Categories : Effectively displays how a total amount is divided into parts for different categories, and how these compositions compare across categories. - Visual Style : The slender \"line\" style for the stacks can be preferable when dealing with many categories, or when a less \"heavy\" visual aesthetic is desired compared to traditional stacked bars. - Data Structure : Uses StackBarData , where each item defines a complete stack (one vertical line) with its segments, their values, and colors. - Configuration : Shares configuration options for axes, grids, and general behavior with StackedBarChart through StackBarConfig and LabelConfig . This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart . Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineStackedBarChart // Correct import for LineStackedBarChart import com.himanshoe.charty.bar.config.StackBarConfig import com.himanshoe.charty.bar.config.BarChartColorConfig // For axis/grid colors import com.himanshoe.charty.bar.model.StackBarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineStackedBarChart() { val dataPoints = listOf( StackBarData( label = \"Region 1\", values = listOf(50f, 30f, 20f), // Segments: Product A, Product B, Product C colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), // Green Color(0xFF2196F3).asSolidChartColor(), // Blue Color(0xFFFFC107).asSolidChartColor() // Amber ) ), StackBarData( label = \"Region 2\", values = listOf(40f, 40f, 20f, 10f), // Four segments colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor(), Color(0xFFF44336).asSolidChartColor() // Red ) ), StackBarData( label = \"Region 3\", values = listOf(25f, 35f, 40f), colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor() ) ) ) LineStackedBarChart( data = { dataPoints }, modifier = Modifier .height(350.dp) .fillMaxWidth() .padding(16.dp), stackBarConfig = StackBarConfig.default().copy( showCurvedBar = false, // Curves are less impactful on very thin lines showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // For axis, grid lines axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, stackData -> println(\"Clicked Line Stack: ${stackData.label}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineStackedBarChartPreview() { SampleLineStackedBarChart() } Screenshots Usage Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack and contains: label: String : The label for this stack, displayed on the X-axis. values: List<Float> : A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors: List<ChartColor> : A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart aspects. (Optional, defaults to StackBarConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render the top segment of each stack with a rounded top. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. minimumBarCount: Int : Ensures a minimum number of stack slots are drawn. barChartColorConfig : A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional) The \"line\" in LineStackedBarChart refers to the thin visual appearance of the entire stack, not to a line graph. It's a stylistic choice for presenting stacked bar data.","title":"Line Stack Bar Chart"},{"location":"charts/line_stack_bar_chart/#line-stacked-bar-chart","text":"","title":"Line Stacked Bar Chart"},{"location":"charts/line_stack_bar_chart/#overview","text":"The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This \"line\" appearance is achieved by internally making the bars narrower. Key characteristics and use cases: - Segmented Line Stacks : Each data point on the X-axis is represented by a single thin vertical line, which is itself segmented to show the constituent parts of a total. - Composition Over Categories : Effectively displays how a total amount is divided into parts for different categories, and how these compositions compare across categories. - Visual Style : The slender \"line\" style for the stacks can be preferable when dealing with many categories, or when a less \"heavy\" visual aesthetic is desired compared to traditional stacked bars. - Data Structure : Uses StackBarData , where each item defines a complete stack (one vertical line) with its segments, their values, and colors. - Configuration : Shares configuration options for axes, grids, and general behavior with StackedBarChart through StackBarConfig and LabelConfig . This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart .","title":"Overview"},{"location":"charts/line_stack_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineStackedBarChart // Correct import for LineStackedBarChart import com.himanshoe.charty.bar.config.StackBarConfig import com.himanshoe.charty.bar.config.BarChartColorConfig // For axis/grid colors import com.himanshoe.charty.bar.model.StackBarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineStackedBarChart() { val dataPoints = listOf( StackBarData( label = \"Region 1\", values = listOf(50f, 30f, 20f), // Segments: Product A, Product B, Product C colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), // Green Color(0xFF2196F3).asSolidChartColor(), // Blue Color(0xFFFFC107).asSolidChartColor() // Amber ) ), StackBarData( label = \"Region 2\", values = listOf(40f, 40f, 20f, 10f), // Four segments colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor(), Color(0xFFF44336).asSolidChartColor() // Red ) ), StackBarData( label = \"Region 3\", values = listOf(25f, 35f, 40f), colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor() ) ) ) LineStackedBarChart( data = { dataPoints }, modifier = Modifier .height(350.dp) .fillMaxWidth() .padding(16.dp), stackBarConfig = StackBarConfig.default().copy( showCurvedBar = false, // Curves are less impactful on very thin lines showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // For axis, grid lines axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, stackData -> println(\"Clicked Line Stack: ${stackData.label}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineStackedBarChartPreview() { SampleLineStackedBarChart() }","title":"Sample Invocation"},{"location":"charts/line_stack_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/line_stack_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack and contains: label: String : The label for this stack, displayed on the X-axis. values: List<Float> : A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors: List<ChartColor> : A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart aspects. (Optional, defaults to StackBarConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render the top segment of each stack with a rounded top. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. minimumBarCount: Int : Ensures a minimum number of stack slots are drawn. barChartColorConfig : A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional) The \"line\" in LineStackedBarChart refers to the thin visual appearance of the entire stack, not to a line graph. It's a stylistic choice for presenting stacked bar data.","title":"Usage"},{"location":"charts/multi_line_chart/","text":"Multi-Line Chart Overview A composable function that renders a chart with multiple lines. This is useful for comparing trends of several datasets over the same continuous interval or time period. Each line has its own color configuration and data points. Usage Key parameters for using this chart: data : A lambda function that returns a list of MultiLineData . Each MultiLineData object defines a single line on the chart and contains: data : A list of LineData objects, where each LineData has an xValue and yValue for that point on this specific line. colorConfig : A LineChartColorConfig for this particular line, specifying its stroke color ( lineColor ) and fill color ( lineFillColor if showFilledArea is true). modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) smoothLineCurve : A Boolean indicating whether the lines should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath each line should be filled. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the lines themselves should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. target : An optional Float value. If provided, a single horizontal target line will be drawn across the chart at this Y-value, applicable to all lines. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). These labels are common for all lines. (Optional, defaults to LabelConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations common to all lines, such as: lineConfig : Settings for showing values directly on the lines. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). The tooltip can display values from all lines at the selected X-coordinate. (Optional, defaults to LineChartConfig() ) onValueChange : A lambda function invoked when a tooltip is active (e.g., via long-press and drag). It receives a list of LineData objects, one for each line, corresponding to the data points at the current X-axis position of the tooltip. (Optional) The X-axis values are assumed to be consistent across all lines in the MultiLineData list for proper alignment and tooltip functionality.","title":"Multi-Line Chart"},{"location":"charts/multi_line_chart/#multi-line-chart","text":"","title":"Multi-Line Chart"},{"location":"charts/multi_line_chart/#overview","text":"A composable function that renders a chart with multiple lines. This is useful for comparing trends of several datasets over the same continuous interval or time period. Each line has its own color configuration and data points.","title":"Overview"},{"location":"charts/multi_line_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of MultiLineData . Each MultiLineData object defines a single line on the chart and contains: data : A list of LineData objects, where each LineData has an xValue and yValue for that point on this specific line. colorConfig : A LineChartColorConfig for this particular line, specifying its stroke color ( lineColor ) and fill color ( lineFillColor if showFilledArea is true). modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) smoothLineCurve : A Boolean indicating whether the lines should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath each line should be filled. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the lines themselves should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. target : An optional Float value. If provided, a single horizontal target line will be drawn across the chart at this Y-value, applicable to all lines. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). These labels are common for all lines. (Optional, defaults to LabelConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations common to all lines, such as: lineConfig : Settings for showing values directly on the lines. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). The tooltip can display values from all lines at the selected X-coordinate. (Optional, defaults to LineChartConfig() ) onValueChange : A lambda function invoked when a tooltip is active (e.g., via long-press and drag). It receives a list of LineData objects, one for each line, corresponding to the data points at the current X-axis position of the tooltip. (Optional) The X-axis values are assumed to be consistent across all lines in the MultiLineData list for proper alignment and tooltip functionality.","title":"Usage"},{"location":"charts/pie_chart/","text":"Pie Chart Overview A composable function to draw a Pie Chart or a Donut Chart. Pie charts are circular statistical graphics, divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents. Usage Key parameters for using this chart: data : A lambda function that returns a list of PieChartData . Each PieChartData object represents a slice of the pie and should contain: value : A Float representing the value of this slice. The chart will calculate the proportion of this value to the total sum of all slice values to determine the slice's angle. label : A String label for this slice. If isDonutChart is false , this label is drawn on the slice. color : A ChartColor for the fill of this slice. labelColor : A ChartColor for the text of the label . modifier : An optional Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) isDonutChart : A Boolean that, if true , renders the chart as a donut chart (a pie chart with a hole in the center). If false (the default), it renders as a standard, filled pie chart. (Optional, defaults to false ) onPieChartSliceClick : A lambda function that is invoked when a slice of the pie chart is clicked. It receives the PieChartData of the clicked slice. (Optional) When a slice is clicked, it may slightly scale up for visual feedback. Labels are displayed directly on the slices for standard pie charts but are typically omitted for donut charts in this implementation.","title":"Pie Chart"},{"location":"charts/pie_chart/#pie-chart","text":"","title":"Pie Chart"},{"location":"charts/pie_chart/#overview","text":"A composable function to draw a Pie Chart or a Donut Chart. Pie charts are circular statistical graphics, divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents.","title":"Overview"},{"location":"charts/pie_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of PieChartData . Each PieChartData object represents a slice of the pie and should contain: value : A Float representing the value of this slice. The chart will calculate the proportion of this value to the total sum of all slice values to determine the slice's angle. label : A String label for this slice. If isDonutChart is false , this label is drawn on the slice. color : A ChartColor for the fill of this slice. labelColor : A ChartColor for the text of the label . modifier : An optional Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) isDonutChart : A Boolean that, if true , renders the chart as a donut chart (a pie chart with a hole in the center). If false (the default), it renders as a standard, filled pie chart. (Optional, defaults to false ) onPieChartSliceClick : A lambda function that is invoked when a slice of the pie chart is clicked. It receives the PieChartData of the clicked slice. (Optional) When a slice is clicked, it may slightly scale up for visual feedback. Labels are displayed directly on the slices for standard pie charts but are typically omitted for donut charts in this implementation.","title":"Usage"},{"location":"charts/point_chart/","text":"Point Chart (Scatter Plot) Overview A composable function to display a point chart, also commonly known as a scatter plot. Scatter plots are used to display values for typically two variables for a set of data. Each data entry is represented as a point whose position is determined by its X and Y values. Usage Key parameters for using this chart: data : A lambda function that returns a list of PointData . Each PointData object represents a single point on the chart and should contain: xValue : The value for the X-axis (can be categorical, though typically points are distributed along this axis based on their index if not otherwise specified by drawing logic). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) colorConfig : A PointChartColorConfig object for configuring the colors of various chart elements. (Optional, defaults to PointChartColorConfig.default() ) This includes: circleColor : ChartColor for the fill of the data points. strokeColor : ChartColor for the outline (stroke) of the data points. selectionBarColor : ChartColor for the vertical bar that can be shown when a point is clicked (if chartConfig.showClickedBar is true). axisColor : ChartColor for the X and Y axis lines. gridColor : ChartColor for the grid lines. chartConfig : A PointChartConfig object for configuring the appearance and behavior of the points and chart interactions. (Optional, defaults to PointChartConfig() ) This includes: circleRadius : The radius of each data point. showClickedBar : A Boolean to enable/disable the display of a vertical bar highlighting the column of a clicked point. animatePoints : A Boolean to enable an animation for the points when the chart is first displayed. animationDurationMillis : Duration of the point animation in milliseconds. animationEasing : The easing function for the point animation. target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) onPointClick : A lambda function that is invoked when the region corresponding to a data point is clicked. It receives the index of the clicked point and its PointData . (Optional) Points can be animated on initial display. Clicking a point can also highlight it by increasing its radius and showing a vertical selection bar.","title":"Point Chart"},{"location":"charts/point_chart/#point-chart-scatter-plot","text":"","title":"Point Chart (Scatter Plot)"},{"location":"charts/point_chart/#overview","text":"A composable function to display a point chart, also commonly known as a scatter plot. Scatter plots are used to display values for typically two variables for a set of data. Each data entry is represented as a point whose position is determined by its X and Y values.","title":"Overview"},{"location":"charts/point_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of PointData . Each PointData object represents a single point on the chart and should contain: xValue : The value for the X-axis (can be categorical, though typically points are distributed along this axis based on their index if not otherwise specified by drawing logic). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) colorConfig : A PointChartColorConfig object for configuring the colors of various chart elements. (Optional, defaults to PointChartColorConfig.default() ) This includes: circleColor : ChartColor for the fill of the data points. strokeColor : ChartColor for the outline (stroke) of the data points. selectionBarColor : ChartColor for the vertical bar that can be shown when a point is clicked (if chartConfig.showClickedBar is true). axisColor : ChartColor for the X and Y axis lines. gridColor : ChartColor for the grid lines. chartConfig : A PointChartConfig object for configuring the appearance and behavior of the points and chart interactions. (Optional, defaults to PointChartConfig() ) This includes: circleRadius : The radius of each data point. showClickedBar : A Boolean to enable/disable the display of a vertical bar highlighting the column of a clicked point. animatePoints : A Boolean to enable an animation for the points when the chart is first displayed. animationDurationMillis : Duration of the point animation in milliseconds. animationEasing : The easing function for the point animation. target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) onPointClick : A lambda function that is invoked when the region corresponding to a data point is clicked. It receives the index of the clicked point and its PointData . (Optional) Points can be animated on initial display. Clicking a point can also highlight it by increasing its radius and showing a vertical selection bar.","title":"Usage"},{"location":"charts/signal_bar_chart/","text":"Signal ProgressBar Chart Overview The SignalProgressBarChart composable is designed to visually represent progress levels, akin to a signal strength indicator on a phone, a steps counter reaching a daily goal, or a battery level display. It's not a traditional bar chart for comparing distinct categories but rather a specialized progress indicator. Key features: - Discrete Blocks : The chart is composed of a series of stacked rectangular blocks. - Progressive Fill : As the progress value increases, these blocks fill up from bottom to top. - Granular Partial Fill : The topmost active block (the one currently being filled) can show a partial fill, providing a more fine-grained visual representation of the progress between discrete block levels. - Animation : The chart includes a built-in animation effect when the progress value changes, smoothly transitioning the fill level. - Customizable : The number of blocks, colors for the filled and unfilled track portions, and the gap between blocks are all configurable. This chart is ideal for at-a-glance status updates where a simple, clear visual of completion or level is needed. Sample Invocation import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.width import androidx.compose.material3.Button import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.SignalProgressBarChart // Correct import path import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import kotlinx.coroutines.delay @Composable fun SampleSignalProgressBarChart() { var currentProgress by remember { mutableStateOf(0f) } // Example of how you might update progress LaunchedEffect(Unit) { // Simulate progress change from 0% to 75% for (i in 0..75 step 5) { currentProgress = i.toFloat() delay(300) } } SignalProgressBarChart( progress = { currentProgress }, // Lambda returning current progress (0f to maxProgress) maxProgress = 100f, // The value 'progress' maps to 100% fill modifier = Modifier .width(80.dp) // Adjust width as needed .height(180.dp) // Adjust height as needed .padding(8.dp), totalBlocks = 10, // Number of segments in the bar trackColor = Color.LightGray.asSolidChartColor(), // Color of the unfilled part of blocks progressColor = Color(0xFF4CAF50).asSolidChartColor(), // Color of the filled part gapRatio = 0.15f // Gap between blocks, relative to block height ) } // Optional: Preview with controls to test @Preview(showBackground = true) @Composable fun InteractiveSampleSignalProgressBarChartPreview() { var progress by remember { mutableStateOf(25f) } Column( horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(16.dp) ) { Text(\"Progress: ${progress.toInt()}%\") SampleSignalProgressBarChart() // You'd pass 'progress' to this if it took it as a direct param // For this sample, the internal LaunchedEffect drives its own progress. // To make this preview interactive with external control, // the SampleSignalProgressBarChart would need to accept progress as a parameter. Button(onClick = { progress = (progress + 10f).coerceAtMost(100f) }, modifier = Modifier.padding(top = 8.dp)) { Text(\"Increase Progress\") } Button(onClick = { progress = (progress - 10f).coerceAtLeast(0f) }) { Text(\"Decrease Progress\") } } } Screenshots Usage The SignalProgressBarChart is available in two overloads, one accepting a Float progress and another an Int progress. Key parameters for using this chart: progress : A lambda function that returns the current progress value. For the Float version: () -> Float . The value typically ranges from 0.0f to maxProgress . For the Int version: () -> Int . The value typically ranges from 0 to maxProgress . maxProgress : The maximum value that progress can reach, representing a full bar. For the Float version: Float , defaults to 100F . For the Int version: Int , this parameter is required. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) totalBlocks : An Int representing the total number of discrete blocks the signal bar is divided into. For example, a phone signal might have 4-5 blocks. (Optional, defaults to 10 ) trackColor : The ChartColor for the unfilled portion (the \"track\") of each block. This color is visible for blocks not yet filled or for the unfilled part of a partially filled block. (Optional, defaults to Color.Gray ) progressColor : The ChartColor for the filled portion (the \"progress\") of each block. (Optional, defaults to Color.Green ) gapRatio : A Float value that defines the size of the gap between blocks. This ratio is relative to the height of a single block. For example, a gapRatio of 0.1F means the gap will be 10% of a block's height. (Optional, defaults to 0.1F )","title":"Signal Bar Chart"},{"location":"charts/signal_bar_chart/#signal-progressbar-chart","text":"","title":"Signal ProgressBar Chart"},{"location":"charts/signal_bar_chart/#overview","text":"The SignalProgressBarChart composable is designed to visually represent progress levels, akin to a signal strength indicator on a phone, a steps counter reaching a daily goal, or a battery level display. It's not a traditional bar chart for comparing distinct categories but rather a specialized progress indicator. Key features: - Discrete Blocks : The chart is composed of a series of stacked rectangular blocks. - Progressive Fill : As the progress value increases, these blocks fill up from bottom to top. - Granular Partial Fill : The topmost active block (the one currently being filled) can show a partial fill, providing a more fine-grained visual representation of the progress between discrete block levels. - Animation : The chart includes a built-in animation effect when the progress value changes, smoothly transitioning the fill level. - Customizable : The number of blocks, colors for the filled and unfilled track portions, and the gap between blocks are all configurable. This chart is ideal for at-a-glance status updates where a simple, clear visual of completion or level is needed.","title":"Overview"},{"location":"charts/signal_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.width import androidx.compose.material3.Button import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.SignalProgressBarChart // Correct import path import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import kotlinx.coroutines.delay @Composable fun SampleSignalProgressBarChart() { var currentProgress by remember { mutableStateOf(0f) } // Example of how you might update progress LaunchedEffect(Unit) { // Simulate progress change from 0% to 75% for (i in 0..75 step 5) { currentProgress = i.toFloat() delay(300) } } SignalProgressBarChart( progress = { currentProgress }, // Lambda returning current progress (0f to maxProgress) maxProgress = 100f, // The value 'progress' maps to 100% fill modifier = Modifier .width(80.dp) // Adjust width as needed .height(180.dp) // Adjust height as needed .padding(8.dp), totalBlocks = 10, // Number of segments in the bar trackColor = Color.LightGray.asSolidChartColor(), // Color of the unfilled part of blocks progressColor = Color(0xFF4CAF50).asSolidChartColor(), // Color of the filled part gapRatio = 0.15f // Gap between blocks, relative to block height ) } // Optional: Preview with controls to test @Preview(showBackground = true) @Composable fun InteractiveSampleSignalProgressBarChartPreview() { var progress by remember { mutableStateOf(25f) } Column( horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(16.dp) ) { Text(\"Progress: ${progress.toInt()}%\") SampleSignalProgressBarChart() // You'd pass 'progress' to this if it took it as a direct param // For this sample, the internal LaunchedEffect drives its own progress. // To make this preview interactive with external control, // the SampleSignalProgressBarChart would need to accept progress as a parameter. Button(onClick = { progress = (progress + 10f).coerceAtMost(100f) }, modifier = Modifier.padding(top = 8.dp)) { Text(\"Increase Progress\") } Button(onClick = { progress = (progress - 10f).coerceAtLeast(0f) }) { Text(\"Decrease Progress\") } } }","title":"Sample Invocation"},{"location":"charts/signal_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/signal_bar_chart/#usage","text":"The SignalProgressBarChart is available in two overloads, one accepting a Float progress and another an Int progress. Key parameters for using this chart: progress : A lambda function that returns the current progress value. For the Float version: () -> Float . The value typically ranges from 0.0f to maxProgress . For the Int version: () -> Int . The value typically ranges from 0 to maxProgress . maxProgress : The maximum value that progress can reach, representing a full bar. For the Float version: Float , defaults to 100F . For the Int version: Int , this parameter is required. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) totalBlocks : An Int representing the total number of discrete blocks the signal bar is divided into. For example, a phone signal might have 4-5 blocks. (Optional, defaults to 10 ) trackColor : The ChartColor for the unfilled portion (the \"track\") of each block. This color is visible for blocks not yet filled or for the unfilled part of a partially filled block. (Optional, defaults to Color.Gray ) progressColor : The ChartColor for the filled portion (the \"progress\") of each block. (Optional, defaults to Color.Green ) gapRatio : A Float value that defines the size of the gap between blocks. This ratio is relative to the height of a single block. For example, a gapRatio of 0.1F means the gap will be 10% of a block's height. (Optional, defaults to 0.1F )","title":"Usage"},{"location":"charts/speedometer_progress_bar/","text":"Speedometer ProgressBar Overview A composable function that displays a speedometer-style progress bar. It features an arc representing the progress, an optional title and subtitle (displaying the percentage) at its center, and an animated indicator that moves along the arc. This is useful for visualizing a single value within a defined range, like a gauge. Usage Key parameters for using this chart: progress : A lambda function that returns the current progress as a Float value, normalized between 0.0 (0%) and 1.0 (100%). title : A String for the text to be displayed in the center of the speedometer, above the progress percentage. color : The ChartColor for the main progress arc that fills up. progressIndicatorColor : The ChartColor for the small circular indicator at the tip of the progress arc. trackColor : The ChartColor for the background track of the arc. modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) dotConfig : A DotConfig object to configure decorative dots along the arc. (Optional, defaults to DotConfig.default() ) showDots : Boolean to control the visibility of these dots. count : Int specifying the number of dots. fillDotColor : ChartColor for dots that are within the current progress range. trackDotColor : ChartColor for dots that are beyond the current progress range. titleTextConfig : A TextConfig object for customizing the appearance of the central title text (e.g., font size, color, style, visibility). (Optional, defaults to TextConfig.default() ) subTitleTextConfig : A TextConfig object for customizing the appearance of the subtitle text, which displays the numerical progress percentage (e.g., \"75%\"). (Optional, defaults to TextConfig.default(fontSize = 20.sp) ) The progress animation is handled internally when the progress value changes. The arc sweep is typically 270 degrees, starting from the bottom-left and moving clockwise.","title":"Speedometer ProgressBar"},{"location":"charts/speedometer_progress_bar/#speedometer-progressbar","text":"","title":"Speedometer ProgressBar"},{"location":"charts/speedometer_progress_bar/#overview","text":"A composable function that displays a speedometer-style progress bar. It features an arc representing the progress, an optional title and subtitle (displaying the percentage) at its center, and an animated indicator that moves along the arc. This is useful for visualizing a single value within a defined range, like a gauge.","title":"Overview"},{"location":"charts/speedometer_progress_bar/#usage","text":"Key parameters for using this chart: progress : A lambda function that returns the current progress as a Float value, normalized between 0.0 (0%) and 1.0 (100%). title : A String for the text to be displayed in the center of the speedometer, above the progress percentage. color : The ChartColor for the main progress arc that fills up. progressIndicatorColor : The ChartColor for the small circular indicator at the tip of the progress arc. trackColor : The ChartColor for the background track of the arc. modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) dotConfig : A DotConfig object to configure decorative dots along the arc. (Optional, defaults to DotConfig.default() ) showDots : Boolean to control the visibility of these dots. count : Int specifying the number of dots. fillDotColor : ChartColor for dots that are within the current progress range. trackDotColor : ChartColor for dots that are beyond the current progress range. titleTextConfig : A TextConfig object for customizing the appearance of the central title text (e.g., font size, color, style, visibility). (Optional, defaults to TextConfig.default() ) subTitleTextConfig : A TextConfig object for customizing the appearance of the subtitle text, which displays the numerical progress percentage (e.g., \"75%\"). (Optional, defaults to TextConfig.default(fontSize = 20.sp) ) The progress animation is handled internally when the progress value changes. The arc sweep is typically 270 degrees, starting from the bottom-left and moving clockwise.","title":"Usage"},{"location":"charts/stack_bar_chart/","text":"Stack Bar Chart Overview A composable function that displays a stacked bar chart. This type of chart is used to show how a larger category is divided into smaller sub-categories and what the proportion of each sub-category is to the total. Each bar represents a total, and segments within the bar represent different parts of that total. Usage Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a single bar and contains: label : A String for the X-axis label of the bar. values : A list of Float values, where each value is a segment in the stack. colors : A list of ChartColor for each corresponding segment in values . modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) target : An optional Float value to be displayed as a horizontal target line on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart-specific aspects like showing axis lines, grid lines, whether to curve the top of the bars, and a minimum bar count. (Optional, defaults to StackBarConfig.default() ) barChartColorConfig : A BarChartColorConfig object primarily used here for configuring the background color of the bars, axis line colors, and grid line colors. The actual segment colors are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function that is invoked when a bar (a full stack) is clicked. It receives the index of the clicked bar and the corresponding StackBarData . (Optional)","title":"Stack Bar Chart"},{"location":"charts/stack_bar_chart/#stack-bar-chart","text":"","title":"Stack Bar Chart"},{"location":"charts/stack_bar_chart/#overview","text":"A composable function that displays a stacked bar chart. This type of chart is used to show how a larger category is divided into smaller sub-categories and what the proportion of each sub-category is to the total. Each bar represents a total, and segments within the bar represent different parts of that total.","title":"Overview"},{"location":"charts/stack_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a single bar and contains: label : A String for the X-axis label of the bar. values : A list of Float values, where each value is a segment in the stack. colors : A list of ChartColor for each corresponding segment in values . modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) target : An optional Float value to be displayed as a horizontal target line on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart-specific aspects like showing axis lines, grid lines, whether to curve the top of the bars, and a minimum bar count. (Optional, defaults to StackBarConfig.default() ) barChartColorConfig : A BarChartColorConfig object primarily used here for configuring the background color of the bars, axis line colors, and grid line colors. The actual segment colors are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function that is invoked when a bar (a full stack) is clicked. It receives the index of the clicked bar and the corresponding StackBarData . (Optional)","title":"Usage"},{"location":"charts/storage_bar/","text":"Storage Bar Overview A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values. Usage Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Storage Bar"},{"location":"charts/storage_bar/#storage-bar","text":"","title":"Storage Bar"},{"location":"charts/storage_bar/#overview","text":"A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values.","title":"Overview"},{"location":"charts/storage_bar/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Usage"}]}