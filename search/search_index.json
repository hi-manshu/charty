{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Charty","text":"<p>Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily create beautiful and interactive charts for your applications.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>To get started with Charty, you need to add it as a dependency to your project.</p> <p>(Detailed installation instructions will be added here based on the project's build system, e.g., Gradle.)</p>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Once Charty is installed, you can start creating charts with just a few lines of code.</p> <pre><code>// Example of creating a simple bar chart (illustrative)\nval data = listOf( /* your data here */ )\nval barChart = Charty.BarChart(data)\n\n// Display the chart in your UI (platform-specific)\n</code></pre> <p>(More detailed usage examples will be provided in the specific chart documentation.)</p>"},{"location":"#library-purpose","title":"Library Purpose","text":"<p>The main goal of Charty is to provide a flexible and easy-to-use API for developers to integrate various types of charts into their Kotlin Multiplatform projects, covering Android, iOS, Desktop, and Web applications. We aim for high performance, extensive customization options, and a consistent look and feel across platforms.</p> <p>Explore the documentation to learn more about the different chart types and how to use them effectively.</p>"},{"location":"charts/bar_chart/","title":"Bar Chart","text":""},{"location":"charts/bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a bar chart.</p>"},{"location":"charts/bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>BarData</code> representing the data points for the bar chart.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>target</code>: An optional target value to be displayed on the chart. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the target line. (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>barChartConfig</code>: A <code>BarChartConfig</code> object for configuring the chart's appearance and behavior. (Optional, defaults to <code>BarChartConfig.default()</code>)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the labels on the chart. (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>barTooltip</code>: An optional <code>BarTooltip</code> to display a tooltip when a bar is clicked. (Optional)</li> <li><code>barChartColorConfig</code>: A <code>BarChartColorConfig</code> object for configuring the colors of the bars, axis lines, and grid lines. (Optional, defaults to <code>BarChartColorConfig.default()</code>)</li> <li><code>onBarClick</code>: A lambda function to handle click events on the bars. It receives the index of the clicked bar and the corresponding <code>BarData</code> as parameters. (Optional)</li> </ul>"},{"location":"charts/circle_chart/","title":"Circle Chart","text":""},{"location":"charts/circle_chart/#overview","title":"Overview","text":"<p>A composable function that displays a circle chart. This chart type is often used to visualize progress for one or more data series as concentric rings. Each ring represents a data point, and its arc length corresponds to its value (typically a percentage).</p>"},{"location":"charts/circle_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>CircleData</code>. Each <code>CircleData</code> object represents a ring in the chart and should contain:<ul> <li><code>value</code>: A <code>Float</code> representing the percentage (0 to 100) to be filled for this ring.</li> <li><code>color</code>: A <code>ChartColor</code> for the filled portion (arc) of the ring.</li> <li><code>trackColor</code>: A <code>ChartColor</code> for the background track of the ring.</li> </ul> </li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional)</li> <li><code>circleChartConfig</code>: A <code>CircleChartConfig</code> object for configuring the chart's appearance. (Optional, defaults to <code>CircleChartConfig.default()</code>) This includes:<ul> <li><code>showEndIndicator</code>: A <code>Boolean</code> (default <code>true</code>) to display a small circular shadow at the end of the progress arc, giving it a visual endpoint.</li> <li><code>startingPosition</code>: A <code>StartingPosition</code> enum (e.g., <code>Top</code>, <code>Bottom</code>, <code>Left</code>, <code>Right</code>, default <code>Top</code>) that determines where the arc for each ring begins.</li> </ul> </li> <li><code>onCircleClick</code>: A lambda function that is invoked when a specific ring in the chart is clicked. It receives the <code>CircleData</code> of the clicked ring. (Optional)</li> </ul> <p>When a ring is clicked, it might slightly scale up for visual feedback. The rings are drawn with rounded end caps for the progress arcs.</p>"},{"location":"charts/comparison_bar_chart/","title":"Comparison Bar Chart","text":""},{"location":"charts/comparison_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a comparison bar chart. This chart is useful for comparing multiple series of data side-by-side for different categories.</p>"},{"location":"charts/comparison_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>ComparisonBarData</code>. Each <code>ComparisonBarData</code> object represents a group of bars and contains a label for the group and a list of float values for the bars in that group, along with their respective colors.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the appearance of labels on the chart (e.g., X-axis labels, Y-axis labels). (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>comparisonBarChartConfig</code>: A <code>ComparisonBarChartConfig</code> object for configuring the chart's specific appearance and behavior, such as showing axis lines, grid lines, or curved bars. (Optional, defaults to <code>ComparisonBarChartConfig.default()</code>)</li> <li><code>onGroupClicked</code>: A lambda function that is invoked when a group of bars is clicked. It receives the index of the clicked group as a parameter. (Optional)</li> </ul>"},{"location":"charts/horizontal_bar_chart/","title":"Horizontal Bar Chart","text":""},{"location":"charts/horizontal_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a horizontal bar chart. This chart is suitable for comparing quantities of different categories, especially when category names are long. It can also display negative values.</p>"},{"location":"charts/horizontal_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>BarData</code> objects. Each <code>BarData</code> represents a bar and includes its X-value (label) and Y-value (length), and optionally its color.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>barChartConfig</code>: A <code>BarChartConfig</code> object for configuring general chart appearance and behavior, such as showing axis lines, grid lines, curved bars, and setting a minimum bar count. (Optional, defaults to <code>BarChartConfig.default()</code>)</li> <li><code>barChartColorConfig</code>: A <code>BarChartColorConfig</code> object for configuring the colors of the bars (fill, negative, background), axis lines, and grid lines. (Optional, defaults to <code>BarChartColorConfig.default()</code>)</li> <li><code>horizontalBarLabelConfig</code>: A <code>HorizontalBarLabelConfig</code> object for configuring the appearance of labels displayed on or near the bars, including text color, background color, and handling of overlapping labels. (Optional, defaults to <code>HorizontalBarLabelConfig.default()</code>)</li> <li><code>onBarClick</code>: A lambda function that is invoked when a bar is clicked. It receives the <code>BarData</code> of the clicked bar as a parameter. (Optional)</li> </ul>"},{"location":"charts/line_bar_chart/","title":"Line Bar Chart","text":""},{"location":"charts/line_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a line bar chart. This chart type typically represents data points as thin vertical lines or \"sticks\". It can be useful for visualizing discrete data points over a continuous range or time.</p>"},{"location":"charts/line_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>BarData</code>. Each <code>BarData</code> object represents a line/bar and includes its X-value (label) and Y-value (height).</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>target</code>: An optional target value to be displayed on the chart, usually as a horizontal line. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the target line (e.g., color, stroke width). (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>barChartConfig</code>: A <code>BarChartConfig</code> object for configuring aspects like showing axis lines, grid lines, curved tops for the lines (though less common for line bar charts), and minimum bar count. (Optional, defaults to <code>BarChartConfig.default()</code>)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the appearance of labels on the chart (e.g., X-axis labels, Y-axis labels). (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>barChartColorConfig</code>: A <code>BarChartColorConfig</code> object for configuring the colors of the lines/bars, axis lines, and grid lines. (Optional, defaults to <code>BarChartColorConfig.default()</code>)</li> <li><code>onBarClick</code>: A lambda function that is invoked when a line/bar is clicked. It receives the index of the clicked item and the corresponding <code>BarData</code> as parameters. (Optional)</li> </ul>"},{"location":"charts/line_chart/","title":"Line Chart","text":""},{"location":"charts/line_chart/#overview","title":"Overview","text":"<p>A composable function that renders a line chart. Line charts are used to display quantitative values over a continuous interval or time period. They are ideal for showing trends in data at equal intervals.</p>"},{"location":"charts/line_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>LineData</code>. Each <code>LineData</code> object represents a point on the line and should contain:<ul> <li><code>xValue</code>: The value for the X-axis (e.g., a timestamp, category index).</li> <li><code>yValue</code>: The value for the Y-axis, which determines the point's vertical position.</li> </ul> </li> <li><code>modifier</code>: An optional <code>Modifier</code> for customizing the layout or drawing behavior of the LineChart. (Optional)</li> <li><code>smoothLineCurve</code>: A <code>Boolean</code> indicating whether the line connecting data points should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to <code>true</code>)</li> <li><code>showFilledArea</code>: A <code>Boolean</code> indicating whether the area beneath the line should be filled with a color. (Optional, defaults to <code>false</code>)</li> <li><code>showLineStroke</code>: A <code>Boolean</code> indicating whether the line itself should be drawn (stroked). (Optional, defaults to <code>true</code>)     Note: At least one of <code>showFilledArea</code> or <code>showLineStroke</code> must be true.</li> <li><code>showOnClickBar</code>: A <code>Boolean</code> that, if true, displays a vertical bar highlighting the selected data point when the chart is clicked. (Optional, defaults to <code>true</code>)</li> <li><code>colorConfig</code>: A <code>LineChartColorConfig</code> object for configuring the colors of:<ul> <li><code>lineColor</code>: The color of the line stroke.</li> <li><code>lineFillColor</code>: The color of the filled area beneath the line (if <code>showFilledArea</code> is true).</li> <li><code>selectionBarColor</code>: The color of the vertical bar shown on click (if <code>showOnClickBar</code> is true). (Optional, defaults to <code>LineChartColorConfig.default()</code>)</li> </ul> </li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>target</code>: An optional <code>Float</code> value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the <code>target</code> line (e.g., color, stroke width, path effect). (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>chartConfig</code>: A <code>LineChartConfig</code> object for more advanced configurations, such as:<ul> <li><code>lineConfig</code>: Settings for showing values directly on the line.</li> <li><code>interactionTooltipConfig</code>: Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). (Optional, defaults to <code>LineChartConfig()</code>)</li> </ul> </li> <li><code>onClick</code>: A lambda function that is invoked when a data point area on the line chart is clicked. It receives the <code>LineData</code> corresponding to the clicked point. (Optional)</li> </ul> <p>The chart also supports an alternative interaction mode via a different overload, where a tooltip can be shown by long-pressing and dragging on the chart, configured through <code>chartConfig.interactionTooltipConfig</code>.</p>"},{"location":"charts/line_stack_bar_chart/","title":"Line Stack Bar Chart","text":""},{"location":"charts/line_stack_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a line stacked bar chart. This chart is a variation of a stacked bar chart where each segment of the stack is represented as a thin line or \"stick\", and these are stacked vertically. It's used to show how a total is divided into parts and how these parts change over categories.</p>"},{"location":"charts/line_stack_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>StackBarData</code>. Each <code>StackBarData</code> object represents a full stack (a single \"line\" in this context) and contains a label, a list of float values for each segment in the stack, and a list of <code>ChartColor</code> for each segment.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>target</code>: An optional target value to be displayed as a horizontal line on the chart. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the target line. (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>stackBarConfig</code>: A <code>StackBarConfig</code> object for configuring chart aspects like showing axis lines, grid lines, curved tops for the stacks, and a minimum bar count. (Optional, defaults to <code>StackBarConfig.default()</code>)</li> <li><code>barChartColorConfig</code>: A <code>BarChartColorConfig</code> object for configuring the colors of the axis lines and grid lines. Note that bar segment colors are defined within <code>StackBarData</code>. (Optional, defaults to <code>BarChartColorConfig.default()</code>)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the appearance of labels (e.g., X-axis, Y-axis). (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>onBarClick</code>: A lambda function that is invoked when a stack (a \"line\") is clicked. It receives the index of the clicked stack and the corresponding <code>StackBarData</code>. (Optional)</li> </ul>"},{"location":"charts/multi_line_chart/","title":"Multi-Line Chart","text":""},{"location":"charts/multi_line_chart/#overview","title":"Overview","text":"<p>A composable function that renders a chart with multiple lines. This is useful for comparing trends of several datasets over the same continuous interval or time period. Each line has its own color configuration and data points.</p>"},{"location":"charts/multi_line_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>MultiLineData</code>. Each <code>MultiLineData</code> object defines a single line on the chart and contains:<ul> <li><code>data</code>: A list of <code>LineData</code> objects, where each <code>LineData</code> has an <code>xValue</code> and <code>yValue</code> for that point on this specific line.</li> <li><code>colorConfig</code>: A <code>LineChartColorConfig</code> for this particular line, specifying its stroke color (<code>lineColor</code>) and fill color (<code>lineFillColor</code> if <code>showFilledArea</code> is true).</li> </ul> </li> <li><code>modifier</code>: An optional <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>smoothLineCurve</code>: A <code>Boolean</code> indicating whether the lines should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to <code>true</code>)</li> <li><code>showFilledArea</code>: A <code>Boolean</code> indicating whether the area beneath each line should be filled. (Optional, defaults to <code>false</code>)</li> <li><code>showLineStroke</code>: A <code>Boolean</code> indicating whether the lines themselves should be drawn (stroked). (Optional, defaults to <code>true</code>)     Note: At least one of <code>showFilledArea</code> or <code>showLineStroke</code> must be true.</li> <li><code>target</code>: An optional <code>Float</code> value. If provided, a single horizontal target line will be drawn across the chart at this Y-value, applicable to all lines. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the <code>target</code> line. (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the X and Y axis labels (visibility, color, text style). These labels are common for all lines. (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>chartConfig</code>: A <code>LineChartConfig</code> object for more advanced configurations common to all lines, such as:<ul> <li><code>lineConfig</code>: Settings for showing values directly on the lines.</li> <li><code>interactionTooltipConfig</code>: Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). The tooltip can display values from all lines at the selected X-coordinate. (Optional, defaults to <code>LineChartConfig()</code>)</li> </ul> </li> <li><code>onValueChange</code>: A lambda function invoked when a tooltip is active (e.g., via long-press and drag). It receives a list of <code>LineData</code> objects, one for each line, corresponding to the data points at the current X-axis position of the tooltip. (Optional)</li> </ul> <p>The X-axis values are assumed to be consistent across all lines in the <code>MultiLineData</code> list for proper alignment and tooltip functionality.</p>"},{"location":"charts/pie_chart/","title":"Pie Chart","text":""},{"location":"charts/pie_chart/#overview","title":"Overview","text":"<p>A composable function to draw a Pie Chart or a Donut Chart. Pie charts are circular statistical graphics, divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents.</p>"},{"location":"charts/pie_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>PieChartData</code>. Each <code>PieChartData</code> object represents a slice of the pie and should contain:<ul> <li><code>value</code>: A <code>Float</code> representing the value of this slice. The chart will calculate the proportion of this value to the total sum of all slice values to determine the slice's angle.</li> <li><code>label</code>: A <code>String</code> label for this slice. If <code>isDonutChart</code> is <code>false</code>, this label is drawn on the slice.</li> <li><code>color</code>: A <code>ChartColor</code> for the fill of this slice.</li> <li><code>labelColor</code>: A <code>ChartColor</code> for the text of the <code>label</code>.</li> </ul> </li> <li><code>modifier</code>: An optional <code>Modifier</code> for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional)</li> <li><code>isDonutChart</code>: A <code>Boolean</code> that, if <code>true</code>, renders the chart as a donut chart (a pie chart with a hole in the center). If <code>false</code> (the default), it renders as a standard, filled pie chart. (Optional, defaults to <code>false</code>)</li> <li><code>onPieChartSliceClick</code>: A lambda function that is invoked when a slice of the pie chart is clicked. It receives the <code>PieChartData</code> of the clicked slice. (Optional)</li> </ul> <p>When a slice is clicked, it may slightly scale up for visual feedback. Labels are displayed directly on the slices for standard pie charts but are typically omitted for donut charts in this implementation.</p>"},{"location":"charts/point_chart/","title":"Point Chart (Scatter Plot)","text":""},{"location":"charts/point_chart/#overview","title":"Overview","text":"<p>A composable function to display a point chart, also commonly known as a scatter plot. Scatter plots are used to display values for typically two variables for a set of data. Each data entry is represented as a point whose position is determined by its X and Y values.</p>"},{"location":"charts/point_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>PointData</code>. Each <code>PointData</code> object represents a single point on the chart and should contain:<ul> <li><code>xValue</code>: The value for the X-axis (can be categorical, though typically points are distributed along this axis based on their index if not otherwise specified by drawing logic).</li> <li><code>yValue</code>: The value for the Y-axis, which determines the point's vertical position.</li> </ul> </li> <li><code>modifier</code>: An optional <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>colorConfig</code>: A <code>PointChartColorConfig</code> object for configuring the colors of various chart elements. (Optional, defaults to <code>PointChartColorConfig.default()</code>) This includes:<ul> <li><code>circleColor</code>: <code>ChartColor</code> for the fill of the data points.</li> <li><code>strokeColor</code>: <code>ChartColor</code> for the outline (stroke) of the data points.</li> <li><code>selectionBarColor</code>: <code>ChartColor</code> for the vertical bar that can be shown when a point is clicked (if <code>chartConfig.showClickedBar</code> is true).</li> <li><code>axisColor</code>: <code>ChartColor</code> for the X and Y axis lines.</li> <li><code>gridColor</code>: <code>ChartColor</code> for the grid lines.</li> </ul> </li> <li><code>chartConfig</code>: A <code>PointChartConfig</code> object for configuring the appearance and behavior of the points and chart interactions. (Optional, defaults to <code>PointChartConfig()</code>) This includes:<ul> <li><code>circleRadius</code>: The radius of each data point.</li> <li><code>showClickedBar</code>: A <code>Boolean</code> to enable/disable the display of a vertical bar highlighting the column of a clicked point.</li> <li><code>animatePoints</code>: A <code>Boolean</code> to enable an animation for the points when the chart is first displayed.</li> <li><code>animationDurationMillis</code>: Duration of the point animation in milliseconds.</li> <li><code>animationEasing</code>: The easing function for the point animation.</li> </ul> </li> <li><code>target</code>: An optional <code>Float</code> value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the <code>target</code> line (e.g., color, stroke width, path effect). (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>onPointClick</code>: A lambda function that is invoked when the region corresponding to a data point is clicked. It receives the index of the clicked point and its <code>PointData</code>. (Optional)</li> </ul> <p>Points can be animated on initial display. Clicking a point can also highlight it by increasing its radius and showing a vertical selection bar.</p>"},{"location":"charts/signal_bar_chart/","title":"Signal Bar Chart","text":""},{"location":"charts/signal_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a signal bar chart (often styled as a progress bar). This chart is typically used to represent a level or progress, like signal strength or battery level, using a series of stacked blocks that fill up based on the progress value. The filling of the topmost active block can be partial, representing fine-grained progress.</p>"},{"location":"charts/signal_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>progress</code>: A lambda function that returns the current progress value. This can be a <code>Float</code> or an <code>Int</code>.</li> <li><code>maxProgress</code>: The maximum value that <code>progress</code> can reach. For the <code>Float</code> version, this defaults to <code>100F</code>. For the <code>Int</code> version, this parameter is required.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>totalBlocks</code>: The total number of discrete blocks the signal bar is divided into. (Optional, defaults to <code>10</code>)</li> <li><code>trackColor</code>: The <code>ChartColor</code> for the unfilled portion (track) of the blocks. (Optional, defaults to <code>Color.Gray</code>)</li> <li><code>progressColor</code>: The <code>ChartColor</code> for the filled portion (progress) of the blocks. (Optional, defaults to <code>Color.Green</code>)</li> <li><code>gapRatio</code>: A <code>Float</code> value that defines the size of the gap between blocks, relative to the height of a single block. For example, <code>0.1F</code> means the gap is 10% of a block's height. (Optional, defaults to <code>0.1F</code>)</li> </ul>"},{"location":"charts/speedometer_progress_bar/","title":"Speedometer ProgressBar","text":""},{"location":"charts/speedometer_progress_bar/#overview","title":"Overview","text":"<p>A composable function that displays a speedometer-style progress bar. It features an arc representing the progress, an optional title and subtitle (displaying the percentage) at its center, and an animated indicator that moves along the arc. This is useful for visualizing a single value within a defined range, like a gauge.</p>"},{"location":"charts/speedometer_progress_bar/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>progress</code>: A lambda function that returns the current progress as a <code>Float</code> value, normalized between <code>0.0</code> (0%) and <code>1.0</code> (100%).</li> <li><code>title</code>: A <code>String</code> for the text to be displayed in the center of the speedometer, above the progress percentage.</li> <li><code>color</code>: The <code>ChartColor</code> for the main progress arc that fills up.</li> <li><code>progressIndicatorColor</code>: The <code>ChartColor</code> for the small circular indicator at the tip of the progress arc.</li> <li><code>trackColor</code>: The <code>ChartColor</code> for the background track of the arc.</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>dotConfig</code>: A <code>DotConfig</code> object to configure decorative dots along the arc. (Optional, defaults to <code>DotConfig.default()</code>)<ul> <li><code>showDots</code>: <code>Boolean</code> to control the visibility of these dots.</li> <li><code>count</code>: <code>Int</code> specifying the number of dots.</li> <li><code>fillDotColor</code>: <code>ChartColor</code> for dots that are within the current progress range.</li> <li><code>trackDotColor</code>: <code>ChartColor</code> for dots that are beyond the current progress range.</li> </ul> </li> <li><code>titleTextConfig</code>: A <code>TextConfig</code> object for customizing the appearance of the central <code>title</code> text (e.g., font size, color, style, visibility). (Optional, defaults to <code>TextConfig.default()</code>)</li> <li><code>subTitleTextConfig</code>: A <code>TextConfig</code> object for customizing the appearance of the subtitle text, which displays the numerical progress percentage (e.g., \"75%\"). (Optional, defaults to <code>TextConfig.default(fontSize = 20.sp)</code>)</li> </ul> <p>The progress animation is handled internally when the <code>progress</code> value changes. The arc sweep is typically 270 degrees, starting from the bottom-left and moving clockwise.</p>"},{"location":"charts/stack_bar_chart/","title":"Stack Bar Chart","text":""},{"location":"charts/stack_bar_chart/#overview","title":"Overview","text":"<p>A composable function that displays a stacked bar chart. This type of chart is used to show how a larger category is divided into smaller sub-categories and what the proportion of each sub-category is to the total. Each bar represents a total, and segments within the bar represent different parts of that total.</p>"},{"location":"charts/stack_bar_chart/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>StackBarData</code>. Each <code>StackBarData</code> object represents a single bar and contains:<ul> <li><code>label</code>: A <code>String</code> for the X-axis label of the bar.</li> <li><code>values</code>: A list of <code>Float</code> values, where each value is a segment in the stack.</li> <li><code>colors</code>: A list of <code>ChartColor</code> for each corresponding segment in <code>values</code>.</li> </ul> </li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart. (Optional)</li> <li><code>target</code>: An optional <code>Float</code> value to be displayed as a horizontal target line on the chart. (Optional)</li> <li><code>targetConfig</code>: A <code>TargetConfig</code> object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to <code>TargetConfig.default()</code>)</li> <li><code>stackBarConfig</code>: A <code>StackBarConfig</code> object for configuring chart-specific aspects like showing axis lines, grid lines, whether to curve the top of the bars, and a minimum bar count. (Optional, defaults to <code>StackBarConfig.default()</code>)</li> <li><code>barChartColorConfig</code>: A <code>BarChartColorConfig</code> object primarily used here for configuring the background color of the bars, axis line colors, and grid line colors. The actual segment colors are defined within each <code>StackBarData</code> item. (Optional, defaults to <code>BarChartColorConfig.default()</code>)</li> <li><code>labelConfig</code>: A <code>LabelConfig</code> object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to <code>LabelConfig.default()</code>)</li> <li><code>onBarClick</code>: A lambda function that is invoked when a bar (a full stack) is clicked. It receives the index of the clicked bar and the corresponding <code>StackBarData</code>. (Optional)</li> </ul>"},{"location":"charts/storage_bar/","title":"Storage Bar","text":""},{"location":"charts/storage_bar/#overview","title":"Overview","text":"<p>A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values.</p>"},{"location":"charts/storage_bar/#usage","title":"Usage","text":"<p>Key parameters for using this chart:</p> <ul> <li><code>data</code>: A lambda function that returns a list of <code>StorageData</code>. Each <code>StorageData</code> object represents a segment in the bar and should contain:<ul> <li><code>value</code>: A <code>Float</code> representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values.</li> <li><code>color</code>: A <code>ChartColor</code> for this segment.</li> </ul> </li> <li><code>trackColor</code>: The <code>ChartColor</code> for the unfilled portion of the bar, displayed if the sum of the <code>value</code> properties in <code>data</code> does not fill the entire available width. (Optional, defaults to <code>Color(0xD3D3D3DE)</code>)</li> <li><code>modifier</code>: A <code>Modifier</code> for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often <code>fillMaxWidth</code>. (Optional)</li> <li><code>onClick</code>: A lambda function that is invoked when a segment of the bar is clicked. It receives the <code>StorageData</code> of the clicked segment. (Optional)</li> </ul> <p>The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.</p>"},{"location":"storage/StorageBar/","title":"StorageBar","text":""},{"location":"storage/StorageBar/#storagebar","title":"StorageBar","text":"<p>The StorageBar composable displays a storage bar chart that allows users to visualize different categories and their respective values.</p>"},{"location":"storage/StorageBar/#parameter","title":"Parameter","text":"<ul> <li>data: A lambda function that returns a list of StorageData representing the categories and their values.</li> <li>trackColor: The color of the track of type ChartColor. Default is a light gray color.</li> <li>modifier: The modifier to be applied to the Canvas.</li> <li>onClick: A lambda function to be invoked when a category is clicked. It receives the clicked data as a parameter.</li> </ul>"},{"location":"storage/StorageBar/#usage","title":"Usage","text":"<pre><code>StorageBar(  \n    data = { storageData },  \n    trackColor = Color(0xD3D3D3DE).asSolidChartColor(),  \n    modifier = Modifier.fillMaxWidth().height(50.dp),  \n    onClick = { clickedData -&gt;  \n        println(\"Clicked on: ${clickedData.name}\")  \n    }  \n)\n</code></pre> <p>You can check ChartColor class to know more how to use colors/extension functions like asSolidChartColor() or asGradientChartColor()</p>"}]}