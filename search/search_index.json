{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Charty Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily create beautiful and interactive charts for your applications. Getting Started Installation To get started with Charty, you need to add it as a dependency to your project. (Detailed installation instructions will be added here based on the project's build system, e.g., Gradle.) Basic Usage Once Charty is installed, you can start creating charts with just a few lines of code. // Example of creating a simple bar chart (illustrative) val data = listOf( /* your data here */ ) val barChart = Charty.BarChart(data) // Display the chart in your UI (platform-specific) (More detailed usage examples will be provided in the specific chart documentation.) Library Purpose The main goal of Charty is to provide a flexible and easy-to-use API for developers to integrate various types of charts into their Kotlin Multiplatform projects, covering Android, iOS, Desktop, and Web applications. We aim for high performance, extensive customization options, and a consistent look and feel across platforms. Explore the documentation to learn more about the different chart types and how to use them effectively.","title":"Home"},{"location":"#welcome-to-charty","text":"Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily create beautiful and interactive charts for your applications.","title":"Welcome to Charty"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"To get started with Charty, you need to add it as a dependency to your project. (Detailed installation instructions will be added here based on the project's build system, e.g., Gradle.)","title":"Installation"},{"location":"#basic-usage","text":"Once Charty is installed, you can start creating charts with just a few lines of code. // Example of creating a simple bar chart (illustrative) val data = listOf( /* your data here */ ) val barChart = Charty.BarChart(data) // Display the chart in your UI (platform-specific) (More detailed usage examples will be provided in the specific chart documentation.)","title":"Basic Usage"},{"location":"#library-purpose","text":"The main goal of Charty is to provide a flexible and easy-to-use API for developers to integrate various types of charts into their Kotlin Multiplatform projects, covering Android, iOS, Desktop, and Web applications. We aim for high performance, extensive customization options, and a consistent look and feel across platforms. Explore the documentation to learn more about the different chart types and how to use them effectively.","title":"Library Purpose"},{"location":"charts/bar_chart/","text":"Bar Chart Overview The BarChart composable function provides a versatile way to display categorical data using vertical bars. It's designed to be highly customizable and supports a variety of features to enhance data visualization. Key features include: - Positive and Negative Values : Can render bars for both positive and negative Y-values, with options to draw them from a central axis. - Customizable Appearance : Bar colors, background colors, axis lines, and grid lines can all be configured using BarChartColorConfig . The shape of the bars (e.g., curved tops) and other behaviors like minimum bar count can be set via BarChartConfig . - Tooltips : Supports displaying tooltips ( BarTooltip ) when a bar is interacted with, providing more detailed information about the data point. - Target Lines : An optional target line can be displayed using the target and targetConfig parameters, useful for highlighting goals or thresholds. - Labels : X and Y axis labels can be configured using LabelConfig for better readability. - Click Interactions : Provides an onBarClick callback to handle user interactions with individual bars. The Bar Chart is ideal for comparing the magnitude of different categories or showing changes over discrete time periods. Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.BarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleBarChart() { val barDataList = listOf( BarData(xValue = \"Jan\", yValue = 100f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = 220f, color = Color.Blue.asSolidChartColor()), BarData(xValue = \"Mar\", yValue = -150f, color = Color.Green.asSolidChartColor()), // Example with a negative value BarData(xValue = \"Apr\", yValue = 80f, color = Color.Yellow.asSolidChartColor(), barBackgroundColor = Color.LightGray.copy(alpha = 0.5f).asSolidChartColor()), BarData(xValue = \"May\", yValue = 120f, color = Color.Cyan.asSolidChartColor()) ) BarChart( data = { barDataList }, modifier = Modifier .height(350.dp) .padding(16.dp) .fillMaxWidth(), barChartConfig = BarChartConfig.default().copy( showCurvedBar = true, drawNegativeValueChart = true // Enable to properly display negative values from center ), barChartColorConfig = BarChartColorConfig.default().copy( axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, barData -> // Handle bar click, e.g., show a toast or navigate println(\"Clicked on: ${barData.xValue}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleBarChartPreview() { SampleBarChart() } Screenshots Usage Key parameters for using this chart: data : A lambda function that returns a list of BarData objects. Each BarData represents a single bar and contains: xValue: Any : The value for the X-axis, typically a String label for the category. yValue: Float : The numerical value for the Y-axis, determining the bar's height. Can be positive or negative. color: ChartColor : The primary color of the bar. barBackgroundColor: ChartColor : (Optional) The background color for the bar's track. Defaults to transparent if not specified. data: Any? : (Optional) Additional data to associate with this bar, accessible in callbacks. modifier : A Modifier for customizing the layout (e.g., size, padding) or drawing behavior of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart, useful for indicating a goal or threshold. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) barChartConfig : A BarChartConfig object for configuring the chart's appearance and behavior. (Optional, defaults to BarChartConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render bars with rounded tops. drawNegativeValueChart: Boolean : Set to true to enable rendering of negative yValue s from a central axis. minimumBarCount: Int : Ensures a minimum number of bar slots are drawn, even if data is less. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) barTooltip : An optional BarTooltip enum ( BarTop or GraphTop ) to display a tooltip showing the Y-value when a bar is interacted with. (Optional) barChartColorConfig : A BarChartColorConfig object for configuring the colors of various chart elements like axis lines, grid lines, and default bar background color. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : A lambda function (Int, BarData) -> Unit that is invoked when a bar is clicked. It receives the index of the clicked bar and its corresponding BarData . (Optional)","title":"Bar Chart"},{"location":"charts/bar_chart/#bar-chart","text":"","title":"Bar Chart"},{"location":"charts/bar_chart/#overview","text":"The BarChart composable function provides a versatile way to display categorical data using vertical bars. It's designed to be highly customizable and supports a variety of features to enhance data visualization. Key features include: - Positive and Negative Values : Can render bars for both positive and negative Y-values, with options to draw them from a central axis. - Customizable Appearance : Bar colors, background colors, axis lines, and grid lines can all be configured using BarChartColorConfig . The shape of the bars (e.g., curved tops) and other behaviors like minimum bar count can be set via BarChartConfig . - Tooltips : Supports displaying tooltips ( BarTooltip ) when a bar is interacted with, providing more detailed information about the data point. - Target Lines : An optional target line can be displayed using the target and targetConfig parameters, useful for highlighting goals or thresholds. - Labels : X and Y axis labels can be configured using LabelConfig for better readability. - Click Interactions : Provides an onBarClick callback to handle user interactions with individual bars. The Bar Chart is ideal for comparing the magnitude of different categories or showing changes over discrete time periods.","title":"Overview"},{"location":"charts/bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.BarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleBarChart() { val barDataList = listOf( BarData(xValue = \"Jan\", yValue = 100f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = 220f, color = Color.Blue.asSolidChartColor()), BarData(xValue = \"Mar\", yValue = -150f, color = Color.Green.asSolidChartColor()), // Example with a negative value BarData(xValue = \"Apr\", yValue = 80f, color = Color.Yellow.asSolidChartColor(), barBackgroundColor = Color.LightGray.copy(alpha = 0.5f).asSolidChartColor()), BarData(xValue = \"May\", yValue = 120f, color = Color.Cyan.asSolidChartColor()) ) BarChart( data = { barDataList }, modifier = Modifier .height(350.dp) .padding(16.dp) .fillMaxWidth(), barChartConfig = BarChartConfig.default().copy( showCurvedBar = true, drawNegativeValueChart = true // Enable to properly display negative values from center ), barChartColorConfig = BarChartColorConfig.default().copy( axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, barData -> // Handle bar click, e.g., show a toast or navigate println(\"Clicked on: ${barData.xValue}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleBarChartPreview() { SampleBarChart() }","title":"Sample Invocation"},{"location":"charts/bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of BarData objects. Each BarData represents a single bar and contains: xValue: Any : The value for the X-axis, typically a String label for the category. yValue: Float : The numerical value for the Y-axis, determining the bar's height. Can be positive or negative. color: ChartColor : The primary color of the bar. barBackgroundColor: ChartColor : (Optional) The background color for the bar's track. Defaults to transparent if not specified. data: Any? : (Optional) Additional data to associate with this bar, accessible in callbacks. modifier : A Modifier for customizing the layout (e.g., size, padding) or drawing behavior of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart, useful for indicating a goal or threshold. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) barChartConfig : A BarChartConfig object for configuring the chart's appearance and behavior. (Optional, defaults to BarChartConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render bars with rounded tops. drawNegativeValueChart: Boolean : Set to true to enable rendering of negative yValue s from a central axis. minimumBarCount: Int : Ensures a minimum number of bar slots are drawn, even if data is less. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) barTooltip : An optional BarTooltip enum ( BarTop or GraphTop ) to display a tooltip showing the Y-value when a bar is interacted with. (Optional) barChartColorConfig : A BarChartColorConfig object for configuring the colors of various chart elements like axis lines, grid lines, and default bar background color. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : A lambda function (Int, BarData) -> Unit that is invoked when a bar is clicked. It receives the index of the clicked bar and its corresponding BarData . (Optional)","title":"Usage"},{"location":"charts/circle_chart/","text":"Circle Chart Overview A composable function that displays a circle chart. This chart type is often used to visualize progress for one or more data series as concentric rings. Each ring represents a data point, and its arc length corresponds to its value (typically a percentage). Usage Key parameters for using this chart: data : A lambda function that returns a list of CircleData . Each CircleData object represents a ring in the chart and should contain: value : A Float representing the percentage (0 to 100) to be filled for this ring. color : A ChartColor for the filled portion (arc) of the ring. trackColor : A ChartColor for the background track of the ring. modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) circleChartConfig : A CircleChartConfig object for configuring the chart's appearance. (Optional, defaults to CircleChartConfig.default() ) This includes: showEndIndicator : A Boolean (default true ) to display a small circular shadow at the end of the progress arc, giving it a visual endpoint. startingPosition : A StartingPosition enum (e.g., Top , Bottom , Left , Right , default Top ) that determines where the arc for each ring begins. onCircleClick : A lambda function that is invoked when a specific ring in the chart is clicked. It receives the CircleData of the clicked ring. (Optional) When a ring is clicked, it might slightly scale up for visual feedback. The rings are drawn with rounded end caps for the progress arcs.","title":"Circle Chart"},{"location":"charts/circle_chart/#circle-chart","text":"","title":"Circle Chart"},{"location":"charts/circle_chart/#overview","text":"A composable function that displays a circle chart. This chart type is often used to visualize progress for one or more data series as concentric rings. Each ring represents a data point, and its arc length corresponds to its value (typically a percentage).","title":"Overview"},{"location":"charts/circle_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of CircleData . Each CircleData object represents a ring in the chart and should contain: value : A Float representing the percentage (0 to 100) to be filled for this ring. color : A ChartColor for the filled portion (arc) of the ring. trackColor : A ChartColor for the background track of the ring. modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) circleChartConfig : A CircleChartConfig object for configuring the chart's appearance. (Optional, defaults to CircleChartConfig.default() ) This includes: showEndIndicator : A Boolean (default true ) to display a small circular shadow at the end of the progress arc, giving it a visual endpoint. startingPosition : A StartingPosition enum (e.g., Top , Bottom , Left , Right , default Top ) that determines where the arc for each ring begins. onCircleClick : A lambda function that is invoked when a specific ring in the chart is clicked. It receives the CircleData of the clicked ring. (Optional) When a ring is clicked, it might slightly scale up for visual feedback. The rings are drawn with rounded end caps for the progress arcs.","title":"Usage"},{"location":"charts/comparison_bar_chart/","text":"Comparison Bar Chart Overview The ComparisonBarChart composable function is designed to display grouped bar charts. It excels at comparing multiple series of data side-by-side across different categories (groups). For example, you could use it to compare the sales figures of different products (multiple bars within a group) across several quarters (each quarter being a group). Key features include: - Grouped Data Representation : Each primary category (group) on the X-axis can contain multiple bars, each representing a sub-category or series. - Variable Bar Count per Group : Different groups can have a varying number of bars, allowing for flexible data representation. - Individual Bar Styling : Each bar within a group can have its own distinct color, defined in the ComparisonBarData . - Customizable Appearance : Chart aesthetics like axis lines, grid lines, and bar curvature can be configured using ComparisonBarChartConfig . - Labeling : X and Y axis labels can be configured for clarity using LabelConfig . - Click Interactions : Supports click events on entire groups of bars via the onGroupClicked callback. This chart is particularly useful when you need to highlight both individual values and their collective performance within and across groups. Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.ComparisonBarChart import com.himanshoe.charty.bar.config.ComparisonBarChartConfig import com.himanshoe.charty.bar.model.ComparisonBarData import com.himanshoe.charty.common.ChartColor // Assuming ChartColor is directly usable or this is a typealias import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleComparisonBarChart() { val comparisonData = listOf( ComparisonBarData( label = \"Product A\", // Category group bars = listOf(100f, 150f, 120f), // Values for Series 1, Series 2, Series 3 colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor(), Color.Blue.asSolidChartColor() ) ), ComparisonBarData( label = \"Product B\", bars = listOf(130f, 110f), // Only two series for this product colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor() ) ), ComparisonBarData( label = \"Product C\", bars = listOf(80f, 160f, 90f, 140f), // Four series colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor(), Color.Blue.asSolidChartColor(), Color.Magenta.asSolidChartColor() ) ) ) ComparisonBarChart( data = { comparisonData }, modifier = Modifier .height(350.dp) .padding(16.dp) .fillMaxWidth(), comparisonBarChartConfig = ComparisonBarChartConfig.default().copy( showCurvedBar = true, showGridLines = true ) // onGroupClicked = { index -> println(\"Group $index clicked\") } ) } @Preview(showBackground = true) @Composable fun SampleComparisonBarChartPreview() { SampleComparisonBarChart() } Screenshots Usage Key parameters for using this chart: data : A lambda function that returns a list of ComparisonBarData . Each ComparisonBarData object represents a group of bars on the X-axis and contains: label: String : The label for this group, displayed on the X-axis. bars: List<Float> : A list of float values, where each value corresponds to the height of a bar within this group. colors: List<ChartColor> : A list of ChartColor objects, where each color corresponds to a bar in the bars list. The size of colors should match the size of bars . modifier : A Modifier for customizing the layout (e.g., size, padding) or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the appearance of labels on the chart, such as X-axis group labels and Y-axis value labels. (Optional, defaults to LabelConfig.default() ) comparisonBarChartConfig : A ComparisonBarChartConfig object for configuring the chart's specific appearance and behavior. (Optional, defaults to ComparisonBarChartConfig.default() ) Key properties include: showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. showCurvedBar: Boolean : Whether to render bars with rounded tops. onGroupClicked : A lambda function (Int) -> Unit that is invoked when a group of bars (representing one ComparisonBarData item) is clicked. It receives the index of the clicked group. (Optional)","title":"Comparison Bar Chart"},{"location":"charts/comparison_bar_chart/#comparison-bar-chart","text":"","title":"Comparison Bar Chart"},{"location":"charts/comparison_bar_chart/#overview","text":"The ComparisonBarChart composable function is designed to display grouped bar charts. It excels at comparing multiple series of data side-by-side across different categories (groups). For example, you could use it to compare the sales figures of different products (multiple bars within a group) across several quarters (each quarter being a group). Key features include: - Grouped Data Representation : Each primary category (group) on the X-axis can contain multiple bars, each representing a sub-category or series. - Variable Bar Count per Group : Different groups can have a varying number of bars, allowing for flexible data representation. - Individual Bar Styling : Each bar within a group can have its own distinct color, defined in the ComparisonBarData . - Customizable Appearance : Chart aesthetics like axis lines, grid lines, and bar curvature can be configured using ComparisonBarChartConfig . - Labeling : X and Y axis labels can be configured for clarity using LabelConfig . - Click Interactions : Supports click events on entire groups of bars via the onGroupClicked callback. This chart is particularly useful when you need to highlight both individual values and their collective performance within and across groups.","title":"Overview"},{"location":"charts/comparison_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.ComparisonBarChart import com.himanshoe.charty.bar.config.ComparisonBarChartConfig import com.himanshoe.charty.bar.model.ComparisonBarData import com.himanshoe.charty.common.ChartColor // Assuming ChartColor is directly usable or this is a typealias import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleComparisonBarChart() { val comparisonData = listOf( ComparisonBarData( label = \"Product A\", // Category group bars = listOf(100f, 150f, 120f), // Values for Series 1, Series 2, Series 3 colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor(), Color.Blue.asSolidChartColor() ) ), ComparisonBarData( label = \"Product B\", bars = listOf(130f, 110f), // Only two series for this product colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor() ) ), ComparisonBarData( label = \"Product C\", bars = listOf(80f, 160f, 90f, 140f), // Four series colors = listOf( Color.Red.asSolidChartColor(), Color.Green.asSolidChartColor(), Color.Blue.asSolidChartColor(), Color.Magenta.asSolidChartColor() ) ) ) ComparisonBarChart( data = { comparisonData }, modifier = Modifier .height(350.dp) .padding(16.dp) .fillMaxWidth(), comparisonBarChartConfig = ComparisonBarChartConfig.default().copy( showCurvedBar = true, showGridLines = true ) // onGroupClicked = { index -> println(\"Group $index clicked\") } ) } @Preview(showBackground = true) @Composable fun SampleComparisonBarChartPreview() { SampleComparisonBarChart() }","title":"Sample Invocation"},{"location":"charts/comparison_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/comparison_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of ComparisonBarData . Each ComparisonBarData object represents a group of bars on the X-axis and contains: label: String : The label for this group, displayed on the X-axis. bars: List<Float> : A list of float values, where each value corresponds to the height of a bar within this group. colors: List<ChartColor> : A list of ChartColor objects, where each color corresponds to a bar in the bars list. The size of colors should match the size of bars . modifier : A Modifier for customizing the layout (e.g., size, padding) or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the appearance of labels on the chart, such as X-axis group labels and Y-axis value labels. (Optional, defaults to LabelConfig.default() ) comparisonBarChartConfig : A ComparisonBarChartConfig object for configuring the chart's specific appearance and behavior. (Optional, defaults to ComparisonBarChartConfig.default() ) Key properties include: showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. showCurvedBar: Boolean : Whether to render bars with rounded tops. onGroupClicked : A lambda function (Int) -> Unit that is invoked when a group of bars (representing one ComparisonBarData item) is clicked. It receives the index of the clicked group. (Optional)","title":"Usage"},{"location":"charts/horizontal_bar_chart/","text":"Horizontal Bar Chart Overview The HorizontalBarChart composable function displays data as horizontal bars. This orientation is particularly effective for comparing quantities across different categories, especially when the category labels (defined by xValue in BarData ) are long, as they can be displayed clearly along the vertical axis without truncation or rotation. Key features include: - Ideal for Long Labels : Provides ample space for category labels. - Positive and Negative Values : Capable of rendering both positive and negative values. Positive bars extend from the Y-axis to the right, and negative bars extend to the left. If both positive and negative values are present, they typically originate from a central vertical axis. - Customizable Bar Appearance : Bar colors, curvature ( showCurvedBar in barChartConfig ), and background colors can be configured. - Labeling on Bars : Labels for each bar (derived from xValue ) can be drawn directly on or next to the bars, with customizable text color, background, and rotation, configured via horizontalBarLabelConfig . - Axis and Grid Lines : Supports display of axis lines and vertical grid lines for better value interpretation, configurable through barChartConfig and barChartColorConfig . - Click Interactions : Allows handling of click events on individual bars through the onBarClick callback. Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.HorizontalBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.config.HorizontalBarLabelConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleHorizontalBarChart() { val dataPoints = listOf( BarData(xValue = \"Electronics & Gadgets\", yValue = 280f, color = Color(0xFFFFA726).asSolidChartColor()), BarData(xValue = \"Books and Stationery\", yValue = 320f, color = Color(0xFF66BB6A).asSolidChartColor()), BarData(xValue = \"Home Appliances (Returned)\", yValue = -150f, color = Color(0xFFEF5350).asSolidChartColor()), BarData(xValue = \"Fashion & Apparel\", yValue = 200f, color = Color(0xFF29B6F6).asSolidChartColor()), BarData(xValue = \"Groceries\", yValue = 180f, color = Color(0xFFAB47BC).asSolidChartColor()) ) HorizontalBarChart( data = { dataPoints }, modifier = Modifier .height(450.dp) // Height accommodates more bars and longer labels .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = true, showGridLines = true, // Vertical grid lines showAxisLines = true // Y-axis line (vertical) ), barChartColorConfig = BarChartColorConfig.default().copy( gridLineColor = Color.LightGray.copy(alpha = 0.5f).asSolidChartColor() ), horizontalBarLabelConfig = HorizontalBarLabelConfig.default().copy( showLabel = true, // Show labels on bars textColor = Color.Black.asSolidChartColor(), textBackgroundColors = Color.White.copy(alpha = 0.6f).asSolidChartColor() ), onBarClick = { barData -> println(\"Clicked: ${barData.xValue} - ${barData.yValue}\") } ) } @Preview(showBackground = true) @Composable fun SampleHorizontalBarChartPreview() { SampleHorizontalBarChart() } Screenshots Usage Key parameters for using this chart: data : A lambda function that returns a list of BarData objects. Each BarData represents a single horizontal bar and contains: xValue: Any : The value for the Y-axis label (the category name). yValue: Float : The numerical value determining the bar's length. Can be positive (extends right) or negative (extends left). color: ChartColor : The primary color of the bar. barBackgroundColor: ChartColor : (Optional) Background color for the bar's track. data: Any? : (Optional) Additional data associated with the bar. modifier : A Modifier for customizing the layout (e.g., size, padding). (Optional) barChartConfig : A BarChartConfig object for general chart appearance. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : If true, bar ends are rounded. showAxisLines: Boolean : Toggles visibility of the main Y-axis line (vertical line from which bars originate). showGridLines: Boolean : Toggles visibility of vertical grid lines corresponding to Y-axis values. minimumBarCount: Int : Ensures a minimum number of bar slots. barChartColorConfig : A BarChartColorConfig object for colors of bars, axis lines, and grid lines. (Optional, defaults to BarChartColorConfig.default() ) fillBarColor : Default color for positive bars if not specified in BarData . negativeBarColors : Default color for negative bars if not specified in BarData . axisLineColor : Color for the Y-axis line. gridLineColor : Color for the vertical grid lines. horizontalBarLabelConfig : A HorizontalBarLabelConfig object for configuring labels displayed on or near the bars. (Optional, defaults to HorizontalBarLabelConfig.default() ) showLabel: Boolean : If true , displays the xValue as a label on or near its bar. textColor: ChartColor : Color of the label text. textBackgroundColors: ChartColor : Background color for the label text (can be semi-transparent). hasOverlappingLabel: Boolean : Influences label rotation logic. If true, labels are drawn horizontally; otherwise, they might be rotated (e.g., 90 degrees) based on bar orientation and value sign. onBarClick : A lambda function (BarData) -> Unit that is invoked when a bar is clicked. It receives the BarData of the clicked bar. (Optional)","title":"Horizontal Bar Chart"},{"location":"charts/horizontal_bar_chart/#horizontal-bar-chart","text":"","title":"Horizontal Bar Chart"},{"location":"charts/horizontal_bar_chart/#overview","text":"The HorizontalBarChart composable function displays data as horizontal bars. This orientation is particularly effective for comparing quantities across different categories, especially when the category labels (defined by xValue in BarData ) are long, as they can be displayed clearly along the vertical axis without truncation or rotation. Key features include: - Ideal for Long Labels : Provides ample space for category labels. - Positive and Negative Values : Capable of rendering both positive and negative values. Positive bars extend from the Y-axis to the right, and negative bars extend to the left. If both positive and negative values are present, they typically originate from a central vertical axis. - Customizable Bar Appearance : Bar colors, curvature ( showCurvedBar in barChartConfig ), and background colors can be configured. - Labeling on Bars : Labels for each bar (derived from xValue ) can be drawn directly on or next to the bars, with customizable text color, background, and rotation, configured via horizontalBarLabelConfig . - Axis and Grid Lines : Supports display of axis lines and vertical grid lines for better value interpretation, configurable through barChartConfig and barChartColorConfig . - Click Interactions : Allows handling of click events on individual bars through the onBarClick callback.","title":"Overview"},{"location":"charts/horizontal_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.HorizontalBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.config.HorizontalBarLabelConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct @Composable fun SampleHorizontalBarChart() { val dataPoints = listOf( BarData(xValue = \"Electronics & Gadgets\", yValue = 280f, color = Color(0xFFFFA726).asSolidChartColor()), BarData(xValue = \"Books and Stationery\", yValue = 320f, color = Color(0xFF66BB6A).asSolidChartColor()), BarData(xValue = \"Home Appliances (Returned)\", yValue = -150f, color = Color(0xFFEF5350).asSolidChartColor()), BarData(xValue = \"Fashion & Apparel\", yValue = 200f, color = Color(0xFF29B6F6).asSolidChartColor()), BarData(xValue = \"Groceries\", yValue = 180f, color = Color(0xFFAB47BC).asSolidChartColor()) ) HorizontalBarChart( data = { dataPoints }, modifier = Modifier .height(450.dp) // Height accommodates more bars and longer labels .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = true, showGridLines = true, // Vertical grid lines showAxisLines = true // Y-axis line (vertical) ), barChartColorConfig = BarChartColorConfig.default().copy( gridLineColor = Color.LightGray.copy(alpha = 0.5f).asSolidChartColor() ), horizontalBarLabelConfig = HorizontalBarLabelConfig.default().copy( showLabel = true, // Show labels on bars textColor = Color.Black.asSolidChartColor(), textBackgroundColors = Color.White.copy(alpha = 0.6f).asSolidChartColor() ), onBarClick = { barData -> println(\"Clicked: ${barData.xValue} - ${barData.yValue}\") } ) } @Preview(showBackground = true) @Composable fun SampleHorizontalBarChartPreview() { SampleHorizontalBarChart() }","title":"Sample Invocation"},{"location":"charts/horizontal_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/horizontal_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of BarData objects. Each BarData represents a single horizontal bar and contains: xValue: Any : The value for the Y-axis label (the category name). yValue: Float : The numerical value determining the bar's length. Can be positive (extends right) or negative (extends left). color: ChartColor : The primary color of the bar. barBackgroundColor: ChartColor : (Optional) Background color for the bar's track. data: Any? : (Optional) Additional data associated with the bar. modifier : A Modifier for customizing the layout (e.g., size, padding). (Optional) barChartConfig : A BarChartConfig object for general chart appearance. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : If true, bar ends are rounded. showAxisLines: Boolean : Toggles visibility of the main Y-axis line (vertical line from which bars originate). showGridLines: Boolean : Toggles visibility of vertical grid lines corresponding to Y-axis values. minimumBarCount: Int : Ensures a minimum number of bar slots. barChartColorConfig : A BarChartColorConfig object for colors of bars, axis lines, and grid lines. (Optional, defaults to BarChartColorConfig.default() ) fillBarColor : Default color for positive bars if not specified in BarData . negativeBarColors : Default color for negative bars if not specified in BarData . axisLineColor : Color for the Y-axis line. gridLineColor : Color for the vertical grid lines. horizontalBarLabelConfig : A HorizontalBarLabelConfig object for configuring labels displayed on or near the bars. (Optional, defaults to HorizontalBarLabelConfig.default() ) showLabel: Boolean : If true , displays the xValue as a label on or near its bar. textColor: ChartColor : Color of the label text. textBackgroundColors: ChartColor : Background color for the label text (can be semi-transparent). hasOverlappingLabel: Boolean : Influences label rotation logic. If true, labels are drawn horizontally; otherwise, they might be rotated (e.g., 90 degrees) based on bar orientation and value sign. onBarClick : A lambda function (BarData) -> Unit that is invoked when a bar is clicked. It receives the BarData of the clicked bar. (Optional)","title":"Usage"},{"location":"charts/line_bar_chart/","text":"Line Bar Chart Overview The LineBarChart composable offers a distinct visual style for representing categorical data, rendering data points as thin vertical lines or \"sticks\" rather than traditional wider bars. This presentation is achieved by internally adjusting the bar width (typically dividing the available space by 3). Key characteristics and use cases: - Stylistic Variation : While it uses the same BarData structure and shares many configuration options ( BarChartConfig , BarChartColorConfig , LabelConfig ) with the standard BarChart , its visual output is slender lines. - Discrete Data Points : Ideal for visualizing discrete data points where the emphasis is on the magnitude at each specific point along the X-axis. - High-Density Data : Useful when dealing with a large number of data points where traditional bars might appear cluttered. The thinner lines allow for a cleaner representation. - Features : Supports features like positive/negative values (drawn from a central axis if mixed), target lines, axis/grid customization, and click interactions ( onBarClick ). Think of it as a bar chart that has been stylistically modified to appear as lines, making it suitable for scenarios where a less \"heavy\" visual representation is preferred. Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineBarChart() { val lineBarDataPoints = listOf( BarData(xValue = \"Jan\", yValue = 180f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = -120f, color = Color.Blue.asSolidChartColor()), // Negative value example BarData(xValue = \"Mar\", yValue = 220f, color = Color.Green.asSolidChartColor()), BarData(xValue = \"Apr\", yValue = 150f, color = Color.Magenta.asSolidChartColor()), BarData(xValue = \"May\", yValue = 250f, color = Color.Yellow.asSolidChartColor()), BarData(xValue = \"Jun\", yValue = -90f, color = Color.Cyan.asSolidChartColor()) ) LineBarChart( data = { lineBarDataPoints }, modifier = Modifier .height(300.dp) .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = false, // Curves might not be prominent on thin lines but can be enabled drawNegativeValueChart = true, // Important for handling negative values correctly showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // You can set a default fill color here, or rely on colors in BarData // fillBarColor = Color.DarkGray.asSolidChartColor(), axisLineColor = Color.Gray.asSolidChartColor() ), onBarClick = { index, barData -> println(\"Clicked LineBar: ${barData.xValue} (${barData.yValue}), Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineBarChartPreview() { SampleLineBarChart() } Screenshots Usage The LineBarChart utilizes the same data structures and configuration objects as the standard BarChart . Refer to the BarChart documentation for detailed explanations of these parameters. Below is a summary: data : A lambda function returning a list of BarData . Each BarData defines a line's X-position, Y-height, and color. xValue: Any : Category label for the X-axis. yValue: Float : Numerical value for the Y-axis (height of the line). color: ChartColor : Color of the individual line. barBackgroundColor: ChartColor : (Optional) Background color for the line's track. modifier : Modifier for layout customization. (Optional) target : Optional Float for displaying a horizontal target line. (Optional) targetConfig : TargetConfig for the target line's appearance. (Optional, defaults to TargetConfig.default() ) barChartConfig : BarChartConfig for general chart settings. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : Applies rounding to the top of the thin lines. drawNegativeValueChart: Boolean : Enables rendering of negative values from a central axis. showAxisLines: Boolean , showGridLines: Boolean : Control visibility of axis and grid lines. labelConfig : LabelConfig for X and Y axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig : BarChartColorConfig for default colors of lines, axis, and grid. Individual line colors in BarData take precedence. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : Lambda (Int, BarData) -> Unit invoked when a line is clicked. (Optional) The primary distinction from BarChart is the visual rendering of data points as thin lines due to an internal adjustment of bar width.","title":"Line Bar Chart"},{"location":"charts/line_bar_chart/#line-bar-chart","text":"","title":"Line Bar Chart"},{"location":"charts/line_bar_chart/#overview","text":"The LineBarChart composable offers a distinct visual style for representing categorical data, rendering data points as thin vertical lines or \"sticks\" rather than traditional wider bars. This presentation is achieved by internally adjusting the bar width (typically dividing the available space by 3). Key characteristics and use cases: - Stylistic Variation : While it uses the same BarData structure and shares many configuration options ( BarChartConfig , BarChartColorConfig , LabelConfig ) with the standard BarChart , its visual output is slender lines. - Discrete Data Points : Ideal for visualizing discrete data points where the emphasis is on the magnitude at each specific point along the X-axis. - High-Density Data : Useful when dealing with a large number of data points where traditional bars might appear cluttered. The thinner lines allow for a cleaner representation. - Features : Supports features like positive/negative values (drawn from a central axis if mixed), target lines, axis/grid customization, and click interactions ( onBarClick ). Think of it as a bar chart that has been stylistically modified to appear as lines, making it suitable for scenarios where a less \"heavy\" visual representation is preferred.","title":"Overview"},{"location":"charts/line_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineBarChart import com.himanshoe.charty.bar.config.BarChartConfig import com.himanshoe.charty.bar.config.BarChartColorConfig import com.himanshoe.charty.bar.model.BarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineBarChart() { val lineBarDataPoints = listOf( BarData(xValue = \"Jan\", yValue = 180f, color = Color.Red.asSolidChartColor()), BarData(xValue = \"Feb\", yValue = -120f, color = Color.Blue.asSolidChartColor()), // Negative value example BarData(xValue = \"Mar\", yValue = 220f, color = Color.Green.asSolidChartColor()), BarData(xValue = \"Apr\", yValue = 150f, color = Color.Magenta.asSolidChartColor()), BarData(xValue = \"May\", yValue = 250f, color = Color.Yellow.asSolidChartColor()), BarData(xValue = \"Jun\", yValue = -90f, color = Color.Cyan.asSolidChartColor()) ) LineBarChart( data = { lineBarDataPoints }, modifier = Modifier .height(300.dp) .fillMaxWidth() .padding(16.dp), barChartConfig = BarChartConfig.default().copy( showCurvedBar = false, // Curves might not be prominent on thin lines but can be enabled drawNegativeValueChart = true, // Important for handling negative values correctly showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // You can set a default fill color here, or rely on colors in BarData // fillBarColor = Color.DarkGray.asSolidChartColor(), axisLineColor = Color.Gray.asSolidChartColor() ), onBarClick = { index, barData -> println(\"Clicked LineBar: ${barData.xValue} (${barData.yValue}), Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineBarChartPreview() { SampleLineBarChart() }","title":"Sample Invocation"},{"location":"charts/line_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/line_bar_chart/#usage","text":"The LineBarChart utilizes the same data structures and configuration objects as the standard BarChart . Refer to the BarChart documentation for detailed explanations of these parameters. Below is a summary: data : A lambda function returning a list of BarData . Each BarData defines a line's X-position, Y-height, and color. xValue: Any : Category label for the X-axis. yValue: Float : Numerical value for the Y-axis (height of the line). color: ChartColor : Color of the individual line. barBackgroundColor: ChartColor : (Optional) Background color for the line's track. modifier : Modifier for layout customization. (Optional) target : Optional Float for displaying a horizontal target line. (Optional) targetConfig : TargetConfig for the target line's appearance. (Optional, defaults to TargetConfig.default() ) barChartConfig : BarChartConfig for general chart settings. (Optional, defaults to BarChartConfig.default() ) showCurvedBar: Boolean : Applies rounding to the top of the thin lines. drawNegativeValueChart: Boolean : Enables rendering of negative values from a central axis. showAxisLines: Boolean , showGridLines: Boolean : Control visibility of axis and grid lines. labelConfig : LabelConfig for X and Y axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig : BarChartColorConfig for default colors of lines, axis, and grid. Individual line colors in BarData take precedence. (Optional, defaults to BarChartColorConfig.default() ) onBarClick : Lambda (Int, BarData) -> Unit invoked when a line is clicked. (Optional) The primary distinction from BarChart is the visual rendering of data points as thin lines due to an internal adjustment of bar width.","title":"Usage"},{"location":"charts/line_chart/","text":"Line Chart Overview A composable function that renders a line chart. Line charts are used to display quantitative values over a continuous interval or time period. They are ideal for showing trends in data at equal intervals. Usage Key parameters for using this chart: data : A lambda function that returns a list of LineData . Each LineData object represents a point on the line and should contain: xValue : The value for the X-axis (e.g., a timestamp, category index). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the LineChart. (Optional) smoothLineCurve : A Boolean indicating whether the line connecting data points should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath the line should be filled with a color. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the line itself should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. showOnClickBar : A Boolean that, if true, displays a vertical bar highlighting the selected data point when the chart is clicked. (Optional, defaults to true ) colorConfig : A LineChartColorConfig object for configuring the colors of: lineColor : The color of the line stroke. lineFillColor : The color of the filled area beneath the line (if showFilledArea is true). selectionBarColor : The color of the vertical bar shown on click (if showOnClickBar is true). (Optional, defaults to LineChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations, such as: lineConfig : Settings for showing values directly on the line. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). (Optional, defaults to LineChartConfig() ) onClick : A lambda function that is invoked when a data point area on the line chart is clicked. It receives the LineData corresponding to the clicked point. (Optional) The chart also supports an alternative interaction mode via a different overload, where a tooltip can be shown by long-pressing and dragging on the chart, configured through chartConfig.interactionTooltipConfig .","title":"Line Chart"},{"location":"charts/line_chart/#line-chart","text":"","title":"Line Chart"},{"location":"charts/line_chart/#overview","text":"A composable function that renders a line chart. Line charts are used to display quantitative values over a continuous interval or time period. They are ideal for showing trends in data at equal intervals.","title":"Overview"},{"location":"charts/line_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of LineData . Each LineData object represents a point on the line and should contain: xValue : The value for the X-axis (e.g., a timestamp, category index). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the LineChart. (Optional) smoothLineCurve : A Boolean indicating whether the line connecting data points should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath the line should be filled with a color. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the line itself should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. showOnClickBar : A Boolean that, if true, displays a vertical bar highlighting the selected data point when the chart is clicked. (Optional, defaults to true ) colorConfig : A LineChartColorConfig object for configuring the colors of: lineColor : The color of the line stroke. lineFillColor : The color of the filled area beneath the line (if showFilledArea is true). selectionBarColor : The color of the vertical bar shown on click (if showOnClickBar is true). (Optional, defaults to LineChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations, such as: lineConfig : Settings for showing values directly on the line. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). (Optional, defaults to LineChartConfig() ) onClick : A lambda function that is invoked when a data point area on the line chart is clicked. It receives the LineData corresponding to the clicked point. (Optional) The chart also supports an alternative interaction mode via a different overload, where a tooltip can be shown by long-pressing and dragging on the chart, configured through chartConfig.interactionTooltipConfig .","title":"Usage"},{"location":"charts/line_stack_bar_chart/","text":"Line Stacked Bar Chart Overview The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This \"line\" appearance is achieved by internally making the bars narrower. Key characteristics and use cases: - Segmented Line Stacks : Each data point on the X-axis is represented by a single thin vertical line, which is itself segmented to show the constituent parts of a total. - Composition Over Categories : Effectively displays how a total amount is divided into parts for different categories, and how these compositions compare across categories. - Visual Style : The slender \"line\" style for the stacks can be preferable when dealing with many categories, or when a less \"heavy\" visual aesthetic is desired compared to traditional stacked bars. - Data Structure : Uses StackBarData , where each item defines a complete stack (one vertical line) with its segments, their values, and colors. - Configuration : Shares configuration options for axes, grids, and general behavior with StackedBarChart through StackBarConfig and LabelConfig . This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart . Sample Invocation import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineStackedBarChart // Correct import for LineStackedBarChart import com.himanshoe.charty.bar.config.StackBarConfig import com.himanshoe.charty.bar.config.BarChartColorConfig // For axis/grid colors import com.himanshoe.charty.bar.model.StackBarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineStackedBarChart() { val dataPoints = listOf( StackBarData( label = \"Region 1\", values = listOf(50f, 30f, 20f), // Segments: Product A, Product B, Product C colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), // Green Color(0xFF2196F3).asSolidChartColor(), // Blue Color(0xFFFFC107).asSolidChartColor() // Amber ) ), StackBarData( label = \"Region 2\", values = listOf(40f, 40f, 20f, 10f), // Four segments colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor(), Color(0xFFF44336).asSolidChartColor() // Red ) ), StackBarData( label = \"Region 3\", values = listOf(25f, 35f, 40f), colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor() ) ) ) LineStackedBarChart( data = { dataPoints }, modifier = Modifier .height(350.dp) .fillMaxWidth() .padding(16.dp), stackBarConfig = StackBarConfig.default().copy( showCurvedBar = false, // Curves are less impactful on very thin lines showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // For axis, grid lines axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, stackData -> println(\"Clicked Line Stack: ${stackData.label}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineStackedBarChartPreview() { SampleLineStackedBarChart() } Screenshots Usage Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack and contains: label: String : The label for this stack, displayed on the X-axis. values: List<Float> : A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors: List<ChartColor> : A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart aspects. (Optional, defaults to StackBarConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render the top segment of each stack with a rounded top. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. minimumBarCount: Int : Ensures a minimum number of stack slots are drawn. barChartColorConfig : A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional) The \"line\" in LineStackedBarChart refers to the thin visual appearance of the entire stack, not to a line graph. It's a stylistic choice for presenting stacked bar data.","title":"Line Stack Bar Chart"},{"location":"charts/line_stack_bar_chart/#line-stacked-bar-chart","text":"","title":"Line Stacked Bar Chart"},{"location":"charts/line_stack_bar_chart/#overview","text":"The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This \"line\" appearance is achieved by internally making the bars narrower. Key characteristics and use cases: - Segmented Line Stacks : Each data point on the X-axis is represented by a single thin vertical line, which is itself segmented to show the constituent parts of a total. - Composition Over Categories : Effectively displays how a total amount is divided into parts for different categories, and how these compositions compare across categories. - Visual Style : The slender \"line\" style for the stacks can be preferable when dealing with many categories, or when a less \"heavy\" visual aesthetic is desired compared to traditional stacked bars. - Data Structure : Uses StackBarData , where each item defines a complete stack (one vertical line) with its segments, their values, and colors. - Configuration : Shares configuration options for axes, grids, and general behavior with StackedBarChart through StackBarConfig and LabelConfig . This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart .","title":"Overview"},{"location":"charts/line_stack_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.fillMaxWidth import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.LineStackedBarChart // Correct import for LineStackedBarChart import com.himanshoe.charty.bar.config.StackBarConfig import com.himanshoe.charty.bar.config.BarChartColorConfig // For axis/grid colors import com.himanshoe.charty.bar.model.StackBarData import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import com.himanshoe.charty.common.LabelConfig @Composable fun SampleLineStackedBarChart() { val dataPoints = listOf( StackBarData( label = \"Region 1\", values = listOf(50f, 30f, 20f), // Segments: Product A, Product B, Product C colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), // Green Color(0xFF2196F3).asSolidChartColor(), // Blue Color(0xFFFFC107).asSolidChartColor() // Amber ) ), StackBarData( label = \"Region 2\", values = listOf(40f, 40f, 20f, 10f), // Four segments colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor(), Color(0xFFF44336).asSolidChartColor() // Red ) ), StackBarData( label = \"Region 3\", values = listOf(25f, 35f, 40f), colors = listOf( Color(0xFF4CAF50).asSolidChartColor(), Color(0xFF2196F3).asSolidChartColor(), Color(0xFFFFC107).asSolidChartColor() ) ) ) LineStackedBarChart( data = { dataPoints }, modifier = Modifier .height(350.dp) .fillMaxWidth() .padding(16.dp), stackBarConfig = StackBarConfig.default().copy( showCurvedBar = false, // Curves are less impactful on very thin lines showGridLines = true ), labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), barChartColorConfig = BarChartColorConfig.default().copy( // For axis, grid lines axisLineColor = Color.DarkGray.asSolidChartColor() ), onBarClick = { index, stackData -> println(\"Clicked Line Stack: ${stackData.label}, Index: $index\") } ) } @Preview(showBackground = true) @Composable fun SampleLineStackedBarChartPreview() { SampleLineStackedBarChart() }","title":"Sample Invocation"},{"location":"charts/line_stack_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/line_stack_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack and contains: label: String : The label for this stack, displayed on the X-axis. values: List<Float> : A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors: List<ChartColor> : A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart aspects. (Optional, defaults to StackBarConfig.default() ) Key properties include: showCurvedBar: Boolean : Whether to render the top segment of each stack with a rounded top. showAxisLines: Boolean : Toggles visibility of X and Y axis lines. showGridLines: Boolean : Toggles visibility of horizontal grid lines. minimumBarCount: Int : Ensures a minimum number of stack slots are drawn. barChartColorConfig : A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional) The \"line\" in LineStackedBarChart refers to the thin visual appearance of the entire stack, not to a line graph. It's a stylistic choice for presenting stacked bar data.","title":"Usage"},{"location":"charts/multi_line_chart/","text":"Multi-Line Chart Overview A composable function that renders a chart with multiple lines. This is useful for comparing trends of several datasets over the same continuous interval or time period. Each line has its own color configuration and data points. Usage Key parameters for using this chart: data : A lambda function that returns a list of MultiLineData . Each MultiLineData object defines a single line on the chart and contains: data : A list of LineData objects, where each LineData has an xValue and yValue for that point on this specific line. colorConfig : A LineChartColorConfig for this particular line, specifying its stroke color ( lineColor ) and fill color ( lineFillColor if showFilledArea is true). modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) smoothLineCurve : A Boolean indicating whether the lines should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath each line should be filled. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the lines themselves should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. target : An optional Float value. If provided, a single horizontal target line will be drawn across the chart at this Y-value, applicable to all lines. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). These labels are common for all lines. (Optional, defaults to LabelConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations common to all lines, such as: lineConfig : Settings for showing values directly on the lines. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). The tooltip can display values from all lines at the selected X-coordinate. (Optional, defaults to LineChartConfig() ) onValueChange : A lambda function invoked when a tooltip is active (e.g., via long-press and drag). It receives a list of LineData objects, one for each line, corresponding to the data points at the current X-axis position of the tooltip. (Optional) The X-axis values are assumed to be consistent across all lines in the MultiLineData list for proper alignment and tooltip functionality.","title":"Multi-Line Chart"},{"location":"charts/multi_line_chart/#multi-line-chart","text":"","title":"Multi-Line Chart"},{"location":"charts/multi_line_chart/#overview","text":"A composable function that renders a chart with multiple lines. This is useful for comparing trends of several datasets over the same continuous interval or time period. Each line has its own color configuration and data points.","title":"Overview"},{"location":"charts/multi_line_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of MultiLineData . Each MultiLineData object defines a single line on the chart and contains: data : A list of LineData objects, where each LineData has an xValue and yValue for that point on this specific line. colorConfig : A LineChartColorConfig for this particular line, specifying its stroke color ( lineColor ) and fill color ( lineFillColor if showFilledArea is true). modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) smoothLineCurve : A Boolean indicating whether the lines should be drawn with smooth curves (cubic Bezier) or as straight segments. (Optional, defaults to true ) showFilledArea : A Boolean indicating whether the area beneath each line should be filled. (Optional, defaults to false ) showLineStroke : A Boolean indicating whether the lines themselves should be drawn (stroked). (Optional, defaults to true ) Note: At least one of showFilledArea or showLineStroke must be true. target : An optional Float value. If provided, a single horizontal target line will be drawn across the chart at this Y-value, applicable to all lines. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). These labels are common for all lines. (Optional, defaults to LabelConfig.default() ) chartConfig : A LineChartConfig object for more advanced configurations common to all lines, such as: lineConfig : Settings for showing values directly on the lines. interactionTooltipConfig : Configuration for tooltips that can appear on user interaction (e.g., long-press and drag). The tooltip can display values from all lines at the selected X-coordinate. (Optional, defaults to LineChartConfig() ) onValueChange : A lambda function invoked when a tooltip is active (e.g., via long-press and drag). It receives a list of LineData objects, one for each line, corresponding to the data points at the current X-axis position of the tooltip. (Optional) The X-axis values are assumed to be consistent across all lines in the MultiLineData list for proper alignment and tooltip functionality.","title":"Usage"},{"location":"charts/pie_chart/","text":"Pie Chart Overview A composable function to draw a Pie Chart or a Donut Chart. Pie charts are circular statistical graphics, divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents. Usage Key parameters for using this chart: data : A lambda function that returns a list of PieChartData . Each PieChartData object represents a slice of the pie and should contain: value : A Float representing the value of this slice. The chart will calculate the proportion of this value to the total sum of all slice values to determine the slice's angle. label : A String label for this slice. If isDonutChart is false , this label is drawn on the slice. color : A ChartColor for the fill of this slice. labelColor : A ChartColor for the text of the label . modifier : An optional Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) isDonutChart : A Boolean that, if true , renders the chart as a donut chart (a pie chart with a hole in the center). If false (the default), it renders as a standard, filled pie chart. (Optional, defaults to false ) onPieChartSliceClick : A lambda function that is invoked when a slice of the pie chart is clicked. It receives the PieChartData of the clicked slice. (Optional) When a slice is clicked, it may slightly scale up for visual feedback. Labels are displayed directly on the slices for standard pie charts but are typically omitted for donut charts in this implementation.","title":"Pie Chart"},{"location":"charts/pie_chart/#pie-chart","text":"","title":"Pie Chart"},{"location":"charts/pie_chart/#overview","text":"A composable function to draw a Pie Chart or a Donut Chart. Pie charts are circular statistical graphics, divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area) is proportional to the quantity it represents.","title":"Overview"},{"location":"charts/pie_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of PieChartData . Each PieChartData object represents a slice of the pie and should contain: value : A Float representing the value of this slice. The chart will calculate the proportion of this value to the total sum of all slice values to determine the slice's angle. label : A String label for this slice. If isDonutChart is false , this label is drawn on the slice. color : A ChartColor for the fill of this slice. labelColor : A ChartColor for the text of the label . modifier : An optional Modifier for customizing the layout or drawing behavior of the chart, typically used to define its size. (Optional) isDonutChart : A Boolean that, if true , renders the chart as a donut chart (a pie chart with a hole in the center). If false (the default), it renders as a standard, filled pie chart. (Optional, defaults to false ) onPieChartSliceClick : A lambda function that is invoked when a slice of the pie chart is clicked. It receives the PieChartData of the clicked slice. (Optional) When a slice is clicked, it may slightly scale up for visual feedback. Labels are displayed directly on the slices for standard pie charts but are typically omitted for donut charts in this implementation.","title":"Usage"},{"location":"charts/point_chart/","text":"Point Chart (Scatter Plot) Overview A composable function to display a point chart, also commonly known as a scatter plot. Scatter plots are used to display values for typically two variables for a set of data. Each data entry is represented as a point whose position is determined by its X and Y values. Usage Key parameters for using this chart: data : A lambda function that returns a list of PointData . Each PointData object represents a single point on the chart and should contain: xValue : The value for the X-axis (can be categorical, though typically points are distributed along this axis based on their index if not otherwise specified by drawing logic). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) colorConfig : A PointChartColorConfig object for configuring the colors of various chart elements. (Optional, defaults to PointChartColorConfig.default() ) This includes: circleColor : ChartColor for the fill of the data points. strokeColor : ChartColor for the outline (stroke) of the data points. selectionBarColor : ChartColor for the vertical bar that can be shown when a point is clicked (if chartConfig.showClickedBar is true). axisColor : ChartColor for the X and Y axis lines. gridColor : ChartColor for the grid lines. chartConfig : A PointChartConfig object for configuring the appearance and behavior of the points and chart interactions. (Optional, defaults to PointChartConfig() ) This includes: circleRadius : The radius of each data point. showClickedBar : A Boolean to enable/disable the display of a vertical bar highlighting the column of a clicked point. animatePoints : A Boolean to enable an animation for the points when the chart is first displayed. animationDurationMillis : Duration of the point animation in milliseconds. animationEasing : The easing function for the point animation. target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) onPointClick : A lambda function that is invoked when the region corresponding to a data point is clicked. It receives the index of the clicked point and its PointData . (Optional) Points can be animated on initial display. Clicking a point can also highlight it by increasing its radius and showing a vertical selection bar.","title":"Point Chart"},{"location":"charts/point_chart/#point-chart-scatter-plot","text":"","title":"Point Chart (Scatter Plot)"},{"location":"charts/point_chart/#overview","text":"A composable function to display a point chart, also commonly known as a scatter plot. Scatter plots are used to display values for typically two variables for a set of data. Each data entry is represented as a point whose position is determined by its X and Y values.","title":"Overview"},{"location":"charts/point_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of PointData . Each PointData object represents a single point on the chart and should contain: xValue : The value for the X-axis (can be categorical, though typically points are distributed along this axis based on their index if not otherwise specified by drawing logic). yValue : The value for the Y-axis, which determines the point's vertical position. modifier : An optional Modifier for customizing the layout or drawing behavior of the chart. (Optional) labelConfig : A LabelConfig object for configuring the X and Y axis labels (visibility, color, text style). (Optional, defaults to LabelConfig.default() ) colorConfig : A PointChartColorConfig object for configuring the colors of various chart elements. (Optional, defaults to PointChartColorConfig.default() ) This includes: circleColor : ChartColor for the fill of the data points. strokeColor : ChartColor for the outline (stroke) of the data points. selectionBarColor : ChartColor for the vertical bar that can be shown when a point is clicked (if chartConfig.showClickedBar is true). axisColor : ChartColor for the X and Y axis lines. gridColor : ChartColor for the grid lines. chartConfig : A PointChartConfig object for configuring the appearance and behavior of the points and chart interactions. (Optional, defaults to PointChartConfig() ) This includes: circleRadius : The radius of each data point. showClickedBar : A Boolean to enable/disable the display of a vertical bar highlighting the column of a clicked point. animatePoints : A Boolean to enable an animation for the points when the chart is first displayed. animationDurationMillis : Duration of the point animation in milliseconds. animationEasing : The easing function for the point animation. target : An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) onPointClick : A lambda function that is invoked when the region corresponding to a data point is clicked. It receives the index of the clicked point and its PointData . (Optional) Points can be animated on initial display. Clicking a point can also highlight it by increasing its radius and showing a vertical selection bar.","title":"Usage"},{"location":"charts/signal_bar_chart/","text":"Signal ProgressBar Chart Overview The SignalProgressBarChart composable is designed to visually represent progress levels, akin to a signal strength indicator on a phone, a steps counter reaching a daily goal, or a battery level display. It's not a traditional bar chart for comparing distinct categories but rather a specialized progress indicator. Key features: - Discrete Blocks : The chart is composed of a series of stacked rectangular blocks. - Progressive Fill : As the progress value increases, these blocks fill up from bottom to top. - Granular Partial Fill : The topmost active block (the one currently being filled) can show a partial fill, providing a more fine-grained visual representation of the progress between discrete block levels. - Animation : The chart includes a built-in animation effect when the progress value changes, smoothly transitioning the fill level. - Customizable : The number of blocks, colors for the filled and unfilled track portions, and the gap between blocks are all configurable. This chart is ideal for at-a-glance status updates where a simple, clear visual of completion or level is needed. Sample Invocation import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.width import androidx.compose.material3.Button import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.SignalProgressBarChart // Correct import path import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import kotlinx.coroutines.delay @Composable fun SampleSignalProgressBarChart() { var currentProgress by remember { mutableStateOf(0f) } // Example of how you might update progress LaunchedEffect(Unit) { // Simulate progress change from 0% to 75% for (i in 0..75 step 5) { currentProgress = i.toFloat() delay(300) } } SignalProgressBarChart( progress = { currentProgress }, // Lambda returning current progress (0f to maxProgress) maxProgress = 100f, // The value 'progress' maps to 100% fill modifier = Modifier .width(80.dp) // Adjust width as needed .height(180.dp) // Adjust height as needed .padding(8.dp), totalBlocks = 10, // Number of segments in the bar trackColor = Color.LightGray.asSolidChartColor(), // Color of the unfilled part of blocks progressColor = Color(0xFF4CAF50).asSolidChartColor(), // Color of the filled part gapRatio = 0.15f // Gap between blocks, relative to block height ) } // Optional: Preview with controls to test @Preview(showBackground = true) @Composable fun InteractiveSampleSignalProgressBarChartPreview() { var progress by remember { mutableStateOf(25f) } Column( horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(16.dp) ) { Text(\"Progress: ${progress.toInt()}%\") SampleSignalProgressBarChart() // You'd pass 'progress' to this if it took it as a direct param // For this sample, the internal LaunchedEffect drives its own progress. // To make this preview interactive with external control, // the SampleSignalProgressBarChart would need to accept progress as a parameter. Button(onClick = { progress = (progress + 10f).coerceAtMost(100f) }, modifier = Modifier.padding(top = 8.dp)) { Text(\"Increase Progress\") } Button(onClick = { progress = (progress - 10f).coerceAtLeast(0f) }) { Text(\"Decrease Progress\") } } } Screenshots Usage The SignalProgressBarChart is available in two overloads, one accepting a Float progress and another an Int progress. Key parameters for using this chart: progress : A lambda function that returns the current progress value. For the Float version: () -> Float . The value typically ranges from 0.0f to maxProgress . For the Int version: () -> Int . The value typically ranges from 0 to maxProgress . maxProgress : The maximum value that progress can reach, representing a full bar. For the Float version: Float , defaults to 100F . For the Int version: Int , this parameter is required. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) totalBlocks : An Int representing the total number of discrete blocks the signal bar is divided into. For example, a phone signal might have 4-5 blocks. (Optional, defaults to 10 ) trackColor : The ChartColor for the unfilled portion (the \"track\") of each block. This color is visible for blocks not yet filled or for the unfilled part of a partially filled block. (Optional, defaults to Color.Gray ) progressColor : The ChartColor for the filled portion (the \"progress\") of each block. (Optional, defaults to Color.Green ) gapRatio : A Float value that defines the size of the gap between blocks. This ratio is relative to the height of a single block. For example, a gapRatio of 0.1F means the gap will be 10% of a block's height. (Optional, defaults to 0.1F )","title":"Signal Bar Chart"},{"location":"charts/signal_bar_chart/#signal-progressbar-chart","text":"","title":"Signal ProgressBar Chart"},{"location":"charts/signal_bar_chart/#overview","text":"The SignalProgressBarChart composable is designed to visually represent progress levels, akin to a signal strength indicator on a phone, a steps counter reaching a daily goal, or a battery level display. It's not a traditional bar chart for comparing distinct categories but rather a specialized progress indicator. Key features: - Discrete Blocks : The chart is composed of a series of stacked rectangular blocks. - Progressive Fill : As the progress value increases, these blocks fill up from bottom to top. - Granular Partial Fill : The topmost active block (the one currently being filled) can show a partial fill, providing a more fine-grained visual representation of the progress between discrete block levels. - Animation : The chart includes a built-in animation effect when the progress value changes, smoothly transitioning the fill level. - Customizable : The number of blocks, colors for the filled and unfilled track portions, and the gap between blocks are all configurable. This chart is ideal for at-a-glance status updates where a simple, clear visual of completion or level is needed.","title":"Overview"},{"location":"charts/signal_bar_chart/#sample-invocation","text":"import androidx.compose.foundation.layout.Arrangement import androidx.compose.foundation.layout.Column import androidx.compose.foundation.layout.height import androidx.compose.foundation.layout.padding import androidx.compose.foundation.layout.width import androidx.compose.material3.Button import androidx.compose.material3.Text import androidx.compose.runtime.Composable import androidx.compose.runtime.LaunchedEffect import androidx.compose.runtime.getValue import androidx.compose.runtime.mutableStateOf import androidx.compose.runtime.remember import androidx.compose.runtime.setValue import androidx.compose.ui.Alignment import androidx.compose.ui.Modifier import androidx.compose.ui.graphics.Color import androidx.compose.ui.tooling.preview.Preview import androidx.compose.ui.unit.dp import com.himanshoe.charty.bar.SignalProgressBarChart // Correct import path import com.himanshoe.charty.common.ChartColorExtensions.asSolidChartColor // Ensure this import path is correct import kotlinx.coroutines.delay @Composable fun SampleSignalProgressBarChart() { var currentProgress by remember { mutableStateOf(0f) } // Example of how you might update progress LaunchedEffect(Unit) { // Simulate progress change from 0% to 75% for (i in 0..75 step 5) { currentProgress = i.toFloat() delay(300) } } SignalProgressBarChart( progress = { currentProgress }, // Lambda returning current progress (0f to maxProgress) maxProgress = 100f, // The value 'progress' maps to 100% fill modifier = Modifier .width(80.dp) // Adjust width as needed .height(180.dp) // Adjust height as needed .padding(8.dp), totalBlocks = 10, // Number of segments in the bar trackColor = Color.LightGray.asSolidChartColor(), // Color of the unfilled part of blocks progressColor = Color(0xFF4CAF50).asSolidChartColor(), // Color of the filled part gapRatio = 0.15f // Gap between blocks, relative to block height ) } // Optional: Preview with controls to test @Preview(showBackground = true) @Composable fun InteractiveSampleSignalProgressBarChartPreview() { var progress by remember { mutableStateOf(25f) } Column( horizontalAlignment = Alignment.CenterHorizontally, modifier = Modifier.padding(16.dp) ) { Text(\"Progress: ${progress.toInt()}%\") SampleSignalProgressBarChart() // You'd pass 'progress' to this if it took it as a direct param // For this sample, the internal LaunchedEffect drives its own progress. // To make this preview interactive with external control, // the SampleSignalProgressBarChart would need to accept progress as a parameter. Button(onClick = { progress = (progress + 10f).coerceAtMost(100f) }, modifier = Modifier.padding(top = 8.dp)) { Text(\"Increase Progress\") } Button(onClick = { progress = (progress - 10f).coerceAtLeast(0f) }) { Text(\"Decrease Progress\") } } }","title":"Sample Invocation"},{"location":"charts/signal_bar_chart/#screenshots","text":"","title":"Screenshots"},{"location":"charts/signal_bar_chart/#usage","text":"The SignalProgressBarChart is available in two overloads, one accepting a Float progress and another an Int progress. Key parameters for using this chart: progress : A lambda function that returns the current progress value. For the Float version: () -> Float . The value typically ranges from 0.0f to maxProgress . For the Int version: () -> Int . The value typically ranges from 0 to maxProgress . maxProgress : The maximum value that progress can reach, representing a full bar. For the Float version: Float , defaults to 100F . For the Int version: Int , this parameter is required. modifier : A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) totalBlocks : An Int representing the total number of discrete blocks the signal bar is divided into. For example, a phone signal might have 4-5 blocks. (Optional, defaults to 10 ) trackColor : The ChartColor for the unfilled portion (the \"track\") of each block. This color is visible for blocks not yet filled or for the unfilled part of a partially filled block. (Optional, defaults to Color.Gray ) progressColor : The ChartColor for the filled portion (the \"progress\") of each block. (Optional, defaults to Color.Green ) gapRatio : A Float value that defines the size of the gap between blocks. This ratio is relative to the height of a single block. For example, a gapRatio of 0.1F means the gap will be 10% of a block's height. (Optional, defaults to 0.1F )","title":"Usage"},{"location":"charts/speedometer_progress_bar/","text":"Speedometer ProgressBar Overview A composable function that displays a speedometer-style progress bar. It features an arc representing the progress, an optional title and subtitle (displaying the percentage) at its center, and an animated indicator that moves along the arc. This is useful for visualizing a single value within a defined range, like a gauge. Usage Key parameters for using this chart: progress : A lambda function that returns the current progress as a Float value, normalized between 0.0 (0%) and 1.0 (100%). title : A String for the text to be displayed in the center of the speedometer, above the progress percentage. color : The ChartColor for the main progress arc that fills up. progressIndicatorColor : The ChartColor for the small circular indicator at the tip of the progress arc. trackColor : The ChartColor for the background track of the arc. modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) dotConfig : A DotConfig object to configure decorative dots along the arc. (Optional, defaults to DotConfig.default() ) showDots : Boolean to control the visibility of these dots. count : Int specifying the number of dots. fillDotColor : ChartColor for dots that are within the current progress range. trackDotColor : ChartColor for dots that are beyond the current progress range. titleTextConfig : A TextConfig object for customizing the appearance of the central title text (e.g., font size, color, style, visibility). (Optional, defaults to TextConfig.default() ) subTitleTextConfig : A TextConfig object for customizing the appearance of the subtitle text, which displays the numerical progress percentage (e.g., \"75%\"). (Optional, defaults to TextConfig.default(fontSize = 20.sp) ) The progress animation is handled internally when the progress value changes. The arc sweep is typically 270 degrees, starting from the bottom-left and moving clockwise.","title":"Speedometer ProgressBar"},{"location":"charts/speedometer_progress_bar/#speedometer-progressbar","text":"","title":"Speedometer ProgressBar"},{"location":"charts/speedometer_progress_bar/#overview","text":"A composable function that displays a speedometer-style progress bar. It features an arc representing the progress, an optional title and subtitle (displaying the percentage) at its center, and an animated indicator that moves along the arc. This is useful for visualizing a single value within a defined range, like a gauge.","title":"Overview"},{"location":"charts/speedometer_progress_bar/#usage","text":"Key parameters for using this chart: progress : A lambda function that returns the current progress as a Float value, normalized between 0.0 (0%) and 1.0 (100%). title : A String for the text to be displayed in the center of the speedometer, above the progress percentage. color : The ChartColor for the main progress arc that fills up. progressIndicatorColor : The ChartColor for the small circular indicator at the tip of the progress arc. trackColor : The ChartColor for the background track of the arc. modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) dotConfig : A DotConfig object to configure decorative dots along the arc. (Optional, defaults to DotConfig.default() ) showDots : Boolean to control the visibility of these dots. count : Int specifying the number of dots. fillDotColor : ChartColor for dots that are within the current progress range. trackDotColor : ChartColor for dots that are beyond the current progress range. titleTextConfig : A TextConfig object for customizing the appearance of the central title text (e.g., font size, color, style, visibility). (Optional, defaults to TextConfig.default() ) subTitleTextConfig : A TextConfig object for customizing the appearance of the subtitle text, which displays the numerical progress percentage (e.g., \"75%\"). (Optional, defaults to TextConfig.default(fontSize = 20.sp) ) The progress animation is handled internally when the progress value changes. The arc sweep is typically 270 degrees, starting from the bottom-left and moving clockwise.","title":"Usage"},{"location":"charts/stack_bar_chart/","text":"Stack Bar Chart Overview A composable function that displays a stacked bar chart. This type of chart is used to show how a larger category is divided into smaller sub-categories and what the proportion of each sub-category is to the total. Each bar represents a total, and segments within the bar represent different parts of that total. Usage Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a single bar and contains: label : A String for the X-axis label of the bar. values : A list of Float values, where each value is a segment in the stack. colors : A list of ChartColor for each corresponding segment in values . modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) target : An optional Float value to be displayed as a horizontal target line on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart-specific aspects like showing axis lines, grid lines, whether to curve the top of the bars, and a minimum bar count. (Optional, defaults to StackBarConfig.default() ) barChartColorConfig : A BarChartColorConfig object primarily used here for configuring the background color of the bars, axis line colors, and grid line colors. The actual segment colors are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function that is invoked when a bar (a full stack) is clicked. It receives the index of the clicked bar and the corresponding StackBarData . (Optional)","title":"Stack Bar Chart"},{"location":"charts/stack_bar_chart/#stack-bar-chart","text":"","title":"Stack Bar Chart"},{"location":"charts/stack_bar_chart/#overview","text":"A composable function that displays a stacked bar chart. This type of chart is used to show how a larger category is divided into smaller sub-categories and what the proportion of each sub-category is to the total. Each bar represents a total, and segments within the bar represent different parts of that total.","title":"Overview"},{"location":"charts/stack_bar_chart/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StackBarData . Each StackBarData object represents a single bar and contains: label : A String for the X-axis label of the bar. values : A list of Float values, where each value is a segment in the stack. colors : A list of ChartColor for each corresponding segment in values . modifier : A Modifier for customizing the layout or drawing behavior of the chart. (Optional) target : An optional Float value to be displayed as a horizontal target line on the chart. (Optional) targetConfig : A TargetConfig object for configuring the appearance of the target line (e.g., color, stroke width, path effect). (Optional, defaults to TargetConfig.default() ) stackBarConfig : A StackBarConfig object for configuring chart-specific aspects like showing axis lines, grid lines, whether to curve the top of the bars, and a minimum bar count. (Optional, defaults to StackBarConfig.default() ) barChartColorConfig : A BarChartColorConfig object primarily used here for configuring the background color of the bars, axis line colors, and grid line colors. The actual segment colors are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) labelConfig : A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) onBarClick : A lambda function that is invoked when a bar (a full stack) is clicked. It receives the index of the clicked bar and the corresponding StackBarData . (Optional)","title":"Usage"},{"location":"charts/storage_bar/","text":"Storage Bar Overview A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values. Usage Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Storage Bar"},{"location":"charts/storage_bar/#storage-bar","text":"","title":"Storage Bar"},{"location":"charts/storage_bar/#overview","text":"A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values.","title":"Overview"},{"location":"charts/storage_bar/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Usage"}]}