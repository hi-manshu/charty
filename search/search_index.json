{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Charty Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily conjure beautiful and interactive charts for your applications, much like a wizard casting spells in the world of Harry Potter\ud83d\udcdc\ud83d\udd2e. Getting Started Version Catalog If you're using Version Catalog, you can configure the dependency by adding it to your libs.versions.toml file as follows: [versions] #... charty = \"<version>\" [libraries] #... charty = { module = \"com.himanshoe:charty\", version.ref = \"charty\" } Gradle Add the dependency below to your module 's build.gradle.kts file: dependencies { implementation(\"com.himanshoe:charty:$version\") // if you're using Version Catalog implementation(libs.charty) } For Kotlin Multiplatform, add the dependency below to your commonMain source set's build.gradle.kts file: sourceSets { commonMain.dependencies { implementation(libs.charty) } } Find the latest release version here","title":"Home"},{"location":"#charty","text":"Charty is a modern charting library for Kotlin Multiplatform, designed to help you easily conjure beautiful and interactive charts for your applications, much like a wizard casting spells in the world of Harry Potter\ud83d\udcdc\ud83d\udd2e.","title":"Charty"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#version-catalog","text":"If you're using Version Catalog, you can configure the dependency by adding it to your libs.versions.toml file as follows: [versions] #... charty = \"<version>\" [libraries] #... charty = { module = \"com.himanshoe:charty\", version.ref = \"charty\" }","title":"Version Catalog"},{"location":"#gradle","text":"Add the dependency below to your module 's build.gradle.kts file: dependencies { implementation(\"com.himanshoe:charty:$version\") // if you're using Version Catalog implementation(libs.charty) } For Kotlin Multiplatform, add the dependency below to your commonMain source set's build.gradle.kts file: sourceSets { commonMain.dependencies { implementation(libs.charty) } } Find the latest release version here","title":"Gradle"},{"location":"charts/bar_chart/","text":"Bar Chart \ud83c\udf78Overview A highly customizable and interactive bar chart Composable designed for displaying a list of bars with optional target indicators, tooltips, and click interactions. This component is flexible enough to be used in dashboards, analytical tools, or any visual data representation context in a Jetpack Compose application. \ud83d\udce6 Package import com.himanshoe.charty.bar \ud83e\uddf1 Declaration @Composable fun BarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barTooltip: BarTooltip? = null, barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<BarData> A lambda returning the list of BarData entries to be displayed in the chart. The list determines the number and height of bars. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. target Float? Optional float value indicating a target or benchmark line to be displayed across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration for the appearance of the target line, such as color, stroke, and label visibility. Use TargetConfig.default() for default styling. barChartConfig BarChartConfig Governs bar spacing, corner radius, chart padding, and other display properties. Customize using BarChartConfig . labelConfig LabelConfig Controls how labels for each bar are rendered (font size, visibility, position, etc.). barTooltip BarTooltip? Optional tooltip configuration shown on long-press or hover over a bar. Set to null to disable tooltips. barChartColorConfig BarChartColorConfig Specifies the color scheme for bars, labels, backgrounds, and the target line. Use BarChartColorConfig.default() for standard colors. onBarClick (Int, BarData) -> Unit Lambda called when a bar is clicked. Provides the index of the bar and the corresponding BarData . Default is a no-op. \ud83e\uddee BarData Model Property Type Description yValue Float The numeric value to be plotted on the y-axis . This determines the height of the bar. xValue Any The corresponding value for the x-axis . It can represent a label, date, or category and can be of any type. barColor ChartColor The fill color of the bar. Defaults to Color.Unspecified converted to SolidChartColor . barBackgroundColor ChartColor The background color behind the filled portion of the bar, typically used to indicate the max range or to add contrast. Defaults to a semi-transparent light gray ( #40D3D3D3 ). You can find a mock implementation in sample module's App file Example Usage private fun LazyListScope.addBarChart(target: Float?, data: List<BarData>) { item { BarChart( modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), target = target, barTooltip = BarTooltip.GraphTop, labelConfig = LabelConfig.default().copy( showXLabel = true, xAxisCharCount = 4, showYLabel = true, textColor = Color.Black.asSolidChartColor() ), barChartColorConfig = BarChartColorConfig.default().copy( fillBarColor = Color(0xFFFF92C1).asSolidChartColor(), negativeBarColors = Color(0xFF4D4D4D).asSolidChartColor() ), data = { data }, barChartConfig = BarChartConfig.default().copy( cornerRadius = CornerRadius(40F, 40F), ), onBarClick = { index, barData -> println(\"click in bar with $index index and data $barData\") } ) } }","title":"Bar Chart"},{"location":"charts/bar_chart/#bar-chart","text":"","title":"Bar Chart"},{"location":"charts/bar_chart/#overview","text":"A highly customizable and interactive bar chart Composable designed for displaying a list of bars with optional target indicators, tooltips, and click interactions. This component is flexible enough to be used in dashboards, analytical tools, or any visual data representation context in a Jetpack Compose application.","title":"\ud83c\udf78Overview"},{"location":"charts/bar_chart/#package","text":"import com.himanshoe.charty.bar","title":"\ud83d\udce6 Package"},{"location":"charts/bar_chart/#declaration","text":"@Composable fun BarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barTooltip: BarTooltip? = null, barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/bar_chart/#parameters","text":"Parameter Type Description data () -> List<BarData> A lambda returning the list of BarData entries to be displayed in the chart. The list determines the number and height of bars. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. target Float? Optional float value indicating a target or benchmark line to be displayed across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration for the appearance of the target line, such as color, stroke, and label visibility. Use TargetConfig.default() for default styling. barChartConfig BarChartConfig Governs bar spacing, corner radius, chart padding, and other display properties. Customize using BarChartConfig . labelConfig LabelConfig Controls how labels for each bar are rendered (font size, visibility, position, etc.). barTooltip BarTooltip? Optional tooltip configuration shown on long-press or hover over a bar. Set to null to disable tooltips. barChartColorConfig BarChartColorConfig Specifies the color scheme for bars, labels, backgrounds, and the target line. Use BarChartColorConfig.default() for standard colors. onBarClick (Int, BarData) -> Unit Lambda called when a bar is clicked. Provides the index of the bar and the corresponding BarData . Default is a no-op.","title":"\ud83d\udd27 Parameters"},{"location":"charts/bar_chart/#bardata-model","text":"Property Type Description yValue Float The numeric value to be plotted on the y-axis . This determines the height of the bar. xValue Any The corresponding value for the x-axis . It can represent a label, date, or category and can be of any type. barColor ChartColor The fill color of the bar. Defaults to Color.Unspecified converted to SolidChartColor . barBackgroundColor ChartColor The background color behind the filled portion of the bar, typically used to indicate the max range or to add contrast. Defaults to a semi-transparent light gray ( #40D3D3D3 ). You can find a mock implementation in sample module's App file","title":"\ud83e\uddee BarData Model"},{"location":"charts/bar_chart/#example-usage","text":"private fun LazyListScope.addBarChart(target: Float?, data: List<BarData>) { item { BarChart( modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), target = target, barTooltip = BarTooltip.GraphTop, labelConfig = LabelConfig.default().copy( showXLabel = true, xAxisCharCount = 4, showYLabel = true, textColor = Color.Black.asSolidChartColor() ), barChartColorConfig = BarChartColorConfig.default().copy( fillBarColor = Color(0xFFFF92C1).asSolidChartColor(), negativeBarColors = Color(0xFF4D4D4D).asSolidChartColor() ), data = { data }, barChartConfig = BarChartConfig.default().copy( cornerRadius = CornerRadius(40F, 40F), ), onBarClick = { index, barData -> println(\"click in bar with $index index and data $barData\") } ) } }","title":"Example Usage"},{"location":"charts/circle_chart/","text":"Circle Chart \ud83c\udf78Overview A customizable and interactive circle chart (like Apple tracking) used for visualizing proportions or segments of a dataset. \ud83d\udce6 Package import com.himanshoe.charty.circle \ud83e\uddf1 Declaration @Composable fun CircleChart( data: () -> List<CircleData>, modifier: Modifier = Modifier, circleChartConfig: CircleChartConfig = CircleChartConfig.default(), onCircleClick: (CircleData) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<CircleData> A lambda returning the list of CircleData objects to be displayed in the chart. Each data entry defines a segment's value and appearance. modifier Modifier Optional Compose Modifier to customize layout, size, padding, alignment, etc. circleChartConfig CircleChartConfig Chart appearance and layout configuration (e.g. stroke width, spacing, animation, inner radius). Defaults to CircleChartConfig.default() . onCircleClick (CircleData) -> Unit Lambda that is invoked when a segment of the chart is clicked. Provides the corresponding CircleData item. Default is a no-op. \ud83e\uddee CircleData Model data class CircleData( val value: Float, val color: ChartColor, val trackColor: ChartColor = color.value.fastMap { it.copy(alpha = 0.5F) }.asGradientChartColor(), val label: String, ) Property Type Description value Float The numeric value representing the size of the slice. This value is used to calculate the angle of the slice relative to the sum of all values. color ChartColor The main color used to fill the slice. Should be visually distinct for each segment. trackColor ChartColor A secondary, typically lighter or semi-transparent version of the main color. It can be used for rendering background rings, shadows, or hover states. Defaults to a gradient based on the main color with reduced alpha (50%). label String The label or description of the slice. Useful for legends or tooltips. You can find a mock implementation in sample module's App file Example Usage val chartItems = listOf( CircleData(value = 40f, label = \"Food\", color = Color.Red.asSolidChartColor()), CircleData(value = 30f, label = \"Transport\", color = Color.Blue.asSolidChartColor()), CircleData(value = 30f, label = \"Others\", color = Color.Green.asSolidChartColor()) ) CircleChart( data = { chartItems }, modifier = Modifier.size(200.dp), onCircleClick = { segment -> println(\"Clicked on: ${segment.label} (${segment.value})\") } )","title":"Circle Chart"},{"location":"charts/circle_chart/#circle-chart","text":"","title":"Circle Chart"},{"location":"charts/circle_chart/#overview","text":"A customizable and interactive circle chart (like Apple tracking) used for visualizing proportions or segments of a dataset.","title":"\ud83c\udf78Overview"},{"location":"charts/circle_chart/#package","text":"import com.himanshoe.charty.circle","title":"\ud83d\udce6 Package"},{"location":"charts/circle_chart/#declaration","text":"@Composable fun CircleChart( data: () -> List<CircleData>, modifier: Modifier = Modifier, circleChartConfig: CircleChartConfig = CircleChartConfig.default(), onCircleClick: (CircleData) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/circle_chart/#parameters","text":"Parameter Type Description data () -> List<CircleData> A lambda returning the list of CircleData objects to be displayed in the chart. Each data entry defines a segment's value and appearance. modifier Modifier Optional Compose Modifier to customize layout, size, padding, alignment, etc. circleChartConfig CircleChartConfig Chart appearance and layout configuration (e.g. stroke width, spacing, animation, inner radius). Defaults to CircleChartConfig.default() . onCircleClick (CircleData) -> Unit Lambda that is invoked when a segment of the chart is clicked. Provides the corresponding CircleData item. Default is a no-op.","title":"\ud83d\udd27 Parameters"},{"location":"charts/circle_chart/#circledata-model","text":"data class CircleData( val value: Float, val color: ChartColor, val trackColor: ChartColor = color.value.fastMap { it.copy(alpha = 0.5F) }.asGradientChartColor(), val label: String, ) Property Type Description value Float The numeric value representing the size of the slice. This value is used to calculate the angle of the slice relative to the sum of all values. color ChartColor The main color used to fill the slice. Should be visually distinct for each segment. trackColor ChartColor A secondary, typically lighter or semi-transparent version of the main color. It can be used for rendering background rings, shadows, or hover states. Defaults to a gradient based on the main color with reduced alpha (50%). label String The label or description of the slice. Useful for legends or tooltips. You can find a mock implementation in sample module's App file","title":"\ud83e\uddee CircleData Model"},{"location":"charts/circle_chart/#example-usage","text":"val chartItems = listOf( CircleData(value = 40f, label = \"Food\", color = Color.Red.asSolidChartColor()), CircleData(value = 30f, label = \"Transport\", color = Color.Blue.asSolidChartColor()), CircleData(value = 30f, label = \"Others\", color = Color.Green.asSolidChartColor()) ) CircleChart( data = { chartItems }, modifier = Modifier.size(200.dp), onCircleClick = { segment -> println(\"Clicked on: ${segment.label} (${segment.value})\") } )","title":"Example Usage"},{"location":"charts/comparison_bar_chart/","text":"ComparisonBarChart \ud83c\udf78Overview A chart that displays a grouped bar chart for comparing multiple values across common categories (e.g., monthly comparisons for different products, users, or metrics). Each group represents a category and contains multiple bars to compare distinct values within that group. \ud83e\uddf1 Declaration @Composable fun ComparisonBarChart( data: () -> List<ComparisonBarData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), comparisonBarChartConfig: ComparisonBarChartConfig = ComparisonBarChartConfig.default(), onGroupClicked: (Int) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<ComparisonBarData> A lambda that returns a list of ComparisonBarData items. Each item defines a group with one or more bars for comparison. modifier Modifier Compose Modifier to control layout, padding, size, or drawing behavior. labelConfig LabelConfig Configuration for the X-axis and Y-axis labels, including font size, color, alignment, etc. comparisonBarChartConfig ComparisonBarChartConfig Defines visual properties and behavior of the grouped bar chart like bar spacing, animation, alignment, max value, etc. onGroupClicked (Int) -> Unit Callback triggered when a group (set of bars) is clicked. Receives the index of the clicked group. Useful for interactivity or detail views. \ud83d\udcca ComparisonBarData Model A data class representing a single group in a comparison bar chart. Each group corresponds to a label (e.g., a category or time period) and contains multiple bars with individual values and colors for comparison within that group. data class ComparisonBarData( val label: String, val bars: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label representing the group on the X-axis. Common examples include month names, category names, or dates. bars List<Float> A list of Float values representing the height of each bar in the group. The number of values in this list determines how many bars are shown for the group. colors List<ChartColor> A list of ChartColor values that define the fill color for each corresponding bar in the bars list. Should match the size of bars for consistent rendering. \ud83d\udca1 Example val chartData = listOf( ComparisonBarData( label = \"Jan\", bars = listOf( BarData(yValue = 50f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 75f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ), ComparisonBarData( label = \"Feb\", bars = listOf( BarData(yValue = 60f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 85f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ) ) ComparisonBarChart( data = { chartData }, modifier = Modifier.fillMaxWidth(), onGroupClicked = { index -> } )","title":"Comparison Bar Chart"},{"location":"charts/comparison_bar_chart/#comparisonbarchart","text":"","title":"ComparisonBarChart"},{"location":"charts/comparison_bar_chart/#overview","text":"A chart that displays a grouped bar chart for comparing multiple values across common categories (e.g., monthly comparisons for different products, users, or metrics). Each group represents a category and contains multiple bars to compare distinct values within that group.","title":"\ud83c\udf78Overview"},{"location":"charts/comparison_bar_chart/#declaration","text":"@Composable fun ComparisonBarChart( data: () -> List<ComparisonBarData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), comparisonBarChartConfig: ComparisonBarChartConfig = ComparisonBarChartConfig.default(), onGroupClicked: (Int) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/comparison_bar_chart/#parameters","text":"Parameter Type Description data () -> List<ComparisonBarData> A lambda that returns a list of ComparisonBarData items. Each item defines a group with one or more bars for comparison. modifier Modifier Compose Modifier to control layout, padding, size, or drawing behavior. labelConfig LabelConfig Configuration for the X-axis and Y-axis labels, including font size, color, alignment, etc. comparisonBarChartConfig ComparisonBarChartConfig Defines visual properties and behavior of the grouped bar chart like bar spacing, animation, alignment, max value, etc. onGroupClicked (Int) -> Unit Callback triggered when a group (set of bars) is clicked. Receives the index of the clicked group. Useful for interactivity or detail views.","title":"\ud83d\udd27 Parameters"},{"location":"charts/comparison_bar_chart/#comparisonbardata-model","text":"A data class representing a single group in a comparison bar chart. Each group corresponds to a label (e.g., a category or time period) and contains multiple bars with individual values and colors for comparison within that group. data class ComparisonBarData( val label: String, val bars: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label representing the group on the X-axis. Common examples include month names, category names, or dates. bars List<Float> A list of Float values representing the height of each bar in the group. The number of values in this list determines how many bars are shown for the group. colors List<ChartColor> A list of ChartColor values that define the fill color for each corresponding bar in the bars list. Should match the size of bars for consistent rendering.","title":"\ud83d\udcca ComparisonBarData Model"},{"location":"charts/comparison_bar_chart/#example","text":"val chartData = listOf( ComparisonBarData( label = \"Jan\", bars = listOf( BarData(yValue = 50f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 75f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ), ComparisonBarData( label = \"Feb\", bars = listOf( BarData(yValue = 60f, xValue = \"Product A\", barColor = Color.Red.asSolidChartColor()), BarData(yValue = 85f, xValue = \"Product B\", barColor = Color.Blue.asSolidChartColor()) ) ) ) ComparisonBarChart( data = { chartData }, modifier = Modifier.fillMaxWidth(), onGroupClicked = { index -> } )","title":"\ud83d\udca1 Example"},{"location":"charts/horizontal_bar_chart/","text":"HorizontalBarChart \ud83c\udf78Overview A chart that displays a horizontal bar chart , where each bar extends horizontally based on its data value. This layout is ideal when category labels are long or when you want to emphasize value comparisons along a vertical list. \ud83e\uddf1 Declaration @Composable fun HorizontalBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, barChartConfig: BarChartConfig = BarChartConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), horizontalBarLabelConfig: HorizontalBarLabelConfig = HorizontalBarLabelConfig.default(), onBarClick: (BarData) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<BarData> A lambda that returns the list of BarData entries to be displayed as horizontal bars. Each BarData contains the Y-value (bar length) and X-value (label/key). modifier Modifier Compose Modifier for layout control, sizing, padding, or other UI decorations. barChartConfig BarChartConfig Configuration object for chart behavior and layout \u2014 such as minimum number of bars, axis and grid visibility, animation, and spacing. barChartColorConfig BarChartColorConfig Defines color-related customization for bars, axis lines, grid lines, and background. horizontalBarLabelConfig HorizontalBarLabelConfig Styling and layout configuration for the labels displayed alongside the horizontal bars, such as text color, size, alignment, and optional background. onBarClick (BarData) -> Unit Callback function invoked when a bar is clicked. Receives the corresponding BarData item for further action (e.g., navigation, tooltip, etc.). \ud83d\udcca Data Model Each bar is represented using the BarData class: data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), ) \ud83d\udd20 HorizontalBarLabelConfig The horizontalBarLabelConfig parameter lets you customize how the labels for each horizontal bar are rendered. data class HorizontalBarLabelConfig( val showLabel: Boolean, val hasOverlappingLabel: Boolean, val textColor: ChartColor, val textBackgroundColors: ChartColor, val xAxisCharCount: Int?, val labelTextStyle: TextStyle?, ) If labels are not shown, users can drag their finger or scroll across the chart to reveal labels dynamically via gesture detection. This allows clean visualizations by default, but still gives access to detailed information on demand. Property Type Description showLabel Boolean Determines whether the label for each horizontal bar should be shown by default. If false , labels are hidden unless revealed through gestures (e.g. dragging). hasOverlappingLabel Boolean Indicates whether labels are allowed to overlap with each other. If true , labels may render over each other in dense datasets. textColor ChartColor The color of the label text. You can use solid or gradient chart colors. textBackgroundColors ChartColor Background color behind the label text. Useful for adding contrast or highlighting the label. xAxisCharCount Int? Optionally limits the number of characters shown from the X-axis label. Useful for truncation in narrow layouts. If null , no truncation is applied. labelTextStyle TextStyle? Custom styling for label text (e.g., font size, weight, family, line height). If null , defaults are used. \ud83d\udca1 Example Usage val performanceData = listOf( BarData(yValue = 80f, xValue = \"Alice\"), BarData(yValue = 65f, xValue = \"Bob\"), BarData(yValue = 90f, xValue = \"Charlie\") ) HorizontalBarChart( data = { performanceData }, modifier = Modifier.fillMaxWidth(), onBarClick = { bar -> println(\"Clicked on ${bar.xValue} with value ${bar.yValue}\") } )","title":"Horizontal Bar Chart"},{"location":"charts/horizontal_bar_chart/#horizontalbarchart","text":"","title":"HorizontalBarChart"},{"location":"charts/horizontal_bar_chart/#overview","text":"A chart that displays a horizontal bar chart , where each bar extends horizontally based on its data value. This layout is ideal when category labels are long or when you want to emphasize value comparisons along a vertical list.","title":"\ud83c\udf78Overview"},{"location":"charts/horizontal_bar_chart/#declaration","text":"@Composable fun HorizontalBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, barChartConfig: BarChartConfig = BarChartConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), horizontalBarLabelConfig: HorizontalBarLabelConfig = HorizontalBarLabelConfig.default(), onBarClick: (BarData) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/horizontal_bar_chart/#parameters","text":"Parameter Type Description data () -> List<BarData> A lambda that returns the list of BarData entries to be displayed as horizontal bars. Each BarData contains the Y-value (bar length) and X-value (label/key). modifier Modifier Compose Modifier for layout control, sizing, padding, or other UI decorations. barChartConfig BarChartConfig Configuration object for chart behavior and layout \u2014 such as minimum number of bars, axis and grid visibility, animation, and spacing. barChartColorConfig BarChartColorConfig Defines color-related customization for bars, axis lines, grid lines, and background. horizontalBarLabelConfig HorizontalBarLabelConfig Styling and layout configuration for the labels displayed alongside the horizontal bars, such as text color, size, alignment, and optional background. onBarClick (BarData) -> Unit Callback function invoked when a bar is clicked. Receives the corresponding BarData item for further action (e.g., navigation, tooltip, etc.).","title":"\ud83d\udd27 Parameters"},{"location":"charts/horizontal_bar_chart/#data-model","text":"Each bar is represented using the BarData class: data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), )","title":"\ud83d\udcca Data Model"},{"location":"charts/horizontal_bar_chart/#horizontalbarlabelconfig","text":"The horizontalBarLabelConfig parameter lets you customize how the labels for each horizontal bar are rendered. data class HorizontalBarLabelConfig( val showLabel: Boolean, val hasOverlappingLabel: Boolean, val textColor: ChartColor, val textBackgroundColors: ChartColor, val xAxisCharCount: Int?, val labelTextStyle: TextStyle?, ) If labels are not shown, users can drag their finger or scroll across the chart to reveal labels dynamically via gesture detection. This allows clean visualizations by default, but still gives access to detailed information on demand. Property Type Description showLabel Boolean Determines whether the label for each horizontal bar should be shown by default. If false , labels are hidden unless revealed through gestures (e.g. dragging). hasOverlappingLabel Boolean Indicates whether labels are allowed to overlap with each other. If true , labels may render over each other in dense datasets. textColor ChartColor The color of the label text. You can use solid or gradient chart colors. textBackgroundColors ChartColor Background color behind the label text. Useful for adding contrast or highlighting the label. xAxisCharCount Int? Optionally limits the number of characters shown from the X-axis label. Useful for truncation in narrow layouts. If null , no truncation is applied. labelTextStyle TextStyle? Custom styling for label text (e.g., font size, weight, family, line height). If null , defaults are used.","title":"\ud83d\udd20 HorizontalBarLabelConfig"},{"location":"charts/horizontal_bar_chart/#example-usage","text":"val performanceData = listOf( BarData(yValue = 80f, xValue = \"Alice\"), BarData(yValue = 65f, xValue = \"Bob\"), BarData(yValue = 90f, xValue = \"Charlie\") ) HorizontalBarChart( data = { performanceData }, modifier = Modifier.fillMaxWidth(), onBarClick = { bar -> println(\"Clicked on ${bar.xValue} with value ${bar.yValue}\") } )","title":"\ud83d\udca1 Example Usage"},{"location":"charts/line_bar_chart/","text":"LineBarChart \ud83c\udf78Overview A chart that displays a bar chart with an optional target line overlaid. This chart is useful for showing individual bar values while highlighting a specific target or benchmark using a line (e.g., sales goal, average, or threshold). \ud83e\uddf1 Declaration @Composable fun LineBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<BarData> A lambda function returning the list of bar values to render. Each BarData contains the value, label, and color of a bar. modifier Modifier A Jetpack Compose Modifier to customize layout, size, padding, etc. target Float? A numerical value representing a target line to be drawn across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration object to style and position the target line (e.g., stroke color, width, label). barChartConfig BarChartConfig Controls the layout behavior of the chart including min bar count, animation, axis visibility, and spacing. labelConfig LabelConfig Configuration for customizing the bar labels (position, visibility, text style). barChartColorConfig BarChartColorConfig Defines the colors for bars, axis lines, grid lines, and backgrounds. onBarClick (Int, BarData) -> Unit Lambda called when a user taps on a bar. Provides the index and associated BarData . Useful for interactivity and tooltips. \ud83d\udcca Data Model data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), ) \ud83d\udd20 Target Use the target parameter to draw a horizontal reference line across the chart. Ideal for benchmarks, goals, or thresholds (e.g., expected sales, performance targets). Styled using TargetConfig, which allows customizing: Color and stroke width Dashed/solid appearance Label and label positioning \ud83d\udca1 Example Usage LineBarChart( data = { listOf( BarData(80f, \"Jan\"), BarData(120f, \"Feb\"), BarData(60f, \"Mar\") ) }, target = 100f, targetConfig = TargetConfig( color = Color.Red, strokeWidth = 2.dp, showLabel = true, label = \"Target: 100\" ), onBarClick = { index, bar -> println(\"Bar ${index + 1}: ${bar.yValue}\") } )","title":"Line Bar Chart"},{"location":"charts/line_bar_chart/#linebarchart","text":"","title":"LineBarChart"},{"location":"charts/line_bar_chart/#overview","text":"A chart that displays a bar chart with an optional target line overlaid. This chart is useful for showing individual bar values while highlighting a specific target or benchmark using a line (e.g., sales goal, average, or threshold).","title":"\ud83c\udf78Overview"},{"location":"charts/line_bar_chart/#declaration","text":"@Composable fun LineBarChart( data: () -> List<BarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), barChartConfig: BarChartConfig = BarChartConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, BarData) -> Unit = { _, _ -> }, )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/line_bar_chart/#parameters","text":"Parameter Type Description data () -> List<BarData> A lambda function returning the list of bar values to render. Each BarData contains the value, label, and color of a bar. modifier Modifier A Jetpack Compose Modifier to customize layout, size, padding, etc. target Float? A numerical value representing a target line to be drawn across the chart. If null , no target line is shown. targetConfig TargetConfig Configuration object to style and position the target line (e.g., stroke color, width, label). barChartConfig BarChartConfig Controls the layout behavior of the chart including min bar count, animation, axis visibility, and spacing. labelConfig LabelConfig Configuration for customizing the bar labels (position, visibility, text style). barChartColorConfig BarChartColorConfig Defines the colors for bars, axis lines, grid lines, and backgrounds. onBarClick (Int, BarData) -> Unit Lambda called when a user taps on a bar. Provides the index and associated BarData . Useful for interactivity and tooltips.","title":"\ud83d\udd27 Parameters"},{"location":"charts/line_bar_chart/#data-model","text":"data class BarData( val yValue: Float, val xValue: Any, val barColor: ChartColor = Color.Unspecified.asSolidChartColor(), val barBackgroundColor: ChartColor = Color(0x40D3D3D3).asSolidChartColor(), )","title":"\ud83d\udcca Data Model"},{"location":"charts/line_bar_chart/#target","text":"Use the target parameter to draw a horizontal reference line across the chart. Ideal for benchmarks, goals, or thresholds (e.g., expected sales, performance targets). Styled using TargetConfig, which allows customizing: Color and stroke width Dashed/solid appearance Label and label positioning","title":"\ud83d\udd20 Target"},{"location":"charts/line_bar_chart/#example-usage","text":"LineBarChart( data = { listOf( BarData(80f, \"Jan\"), BarData(120f, \"Feb\"), BarData(60f, \"Mar\") ) }, target = 100f, targetConfig = TargetConfig( color = Color.Red, strokeWidth = 2.dp, showLabel = true, label = \"Target: 100\" ), onBarClick = { index, bar -> println(\"Bar ${index + 1}: ${bar.yValue}\") } )","title":"\ud83d\udca1 Example Usage"},{"location":"charts/line_chart/","text":"LineChart Smooth Line Curve Pointed Line Curve Line Filled \ud83c\udf78Overview A chart that renders a line chart to visualize continuous or time-series data. Supports various configurations including smooth curves, area fill, stroke lines, interactivity, and targets. \ud83e\uddf1 Declaration There are two overloaded versions of LineChart , each offering different forms of interaction: Version 1: With onClick support @Composable fun LineChart( data: () -> List<LineData>, modifier: Modifier = Modifier, smoothLineCurve: Boolean = true, showFilledArea: Boolean = false, showLineStroke: Boolean = true, showOnClickBar: Boolean = true, colorConfig: LineChartColorConfig = LineChartColorConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), chartConfig: LineChartConfig = LineChartConfig(), onClick: (LineData) -> Unit = {} ) Version 2: With onValueChange support @Composable fun LineChart( data: () -> List<LineData>, modifier: Modifier = Modifier, smoothLineCurve: Boolean = true, showFilledArea: Boolean = false, showLineStroke: Boolean = true, colorConfig: LineChartColorConfig = LineChartColorConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), chartConfig: LineChartConfig = LineChartConfig(), onValueChange: (LineData) -> Unit = {}, ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<LineData> Lambda returning a list of LineData points representing x/y values to be plotted. modifier Modifier Optional Jetpack Compose modifier for layout styling. smoothLineCurve Boolean If true, curves between data points will be smoothly interpolated using B\u00e9zier or spline curves. If false, straight lines are drawn. showFilledArea Boolean If true, the area under the line is filled with gradient or solid color. showLineStroke Boolean If true, a visible line is drawn over the chart representing the data. showOnClickBar Boolean (Only in version 1) If true, shows a vertical indicator when a value is clicked. colorConfig LineChartColorConfig Defines line stroke color, fill color, gradients, and background. labelConfig LabelConfig Manages display and styling of axis or data labels. target Float? Optional horizontal line to show a benchmark or target. targetConfig TargetConfig Configuration of the target line (color, thickness, label, etc). chartConfig LineChartConfig Controls axis visibility, padding, animation, min/max values, etc. onClick (LineData) -> Unit (Only in version 1) Triggered when a data point is clicked. onValueChange (LineData) -> Unit (Only in version 2) Triggered on drag interactions over the line chart. \u26a0\ufe0f Constraints require(showFilledArea || showLineStroke) { \"Both showFilledArea and showLineStroke cannot be false at the same time\" } At least one of showFilledArea or showLineStroke must be true, otherwise an IllegalArgumentException is thrown. This ensures the chart is visible. \ud83d\udcca Data Model Each data point in the chart is represented by the LineData class: data class LineData( val xValue: Any, val yValue: Float ) \ud83d\udca1 Example Usage LineChart( data = { listOf( LineData(\"Jan\", 10f), LineData(\"Feb\", 40f), LineData(\"Mar\", 25f) ) }, smoothLineCurve = true, showFilledArea = true, showLineStroke = true, target = 30f, targetConfig = TargetConfig(label = \"Average\"), onClick = { lineData -> println(\"Clicked: ${lineData.xValue} -> ${lineData.yValue}\") } )","title":"Line Chart"},{"location":"charts/line_chart/#linechart","text":"Smooth Line Curve Pointed Line Curve Line Filled","title":"LineChart"},{"location":"charts/line_chart/#overview","text":"A chart that renders a line chart to visualize continuous or time-series data. Supports various configurations including smooth curves, area fill, stroke lines, interactivity, and targets.","title":"\ud83c\udf78Overview"},{"location":"charts/line_chart/#declaration","text":"There are two overloaded versions of LineChart , each offering different forms of interaction:","title":"\ud83e\uddf1 Declaration"},{"location":"charts/line_chart/#version-1-with-onclick-support","text":"@Composable fun LineChart( data: () -> List<LineData>, modifier: Modifier = Modifier, smoothLineCurve: Boolean = true, showFilledArea: Boolean = false, showLineStroke: Boolean = true, showOnClickBar: Boolean = true, colorConfig: LineChartColorConfig = LineChartColorConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), chartConfig: LineChartConfig = LineChartConfig(), onClick: (LineData) -> Unit = {} )","title":"Version 1: With onClick support"},{"location":"charts/line_chart/#version-2-with-onvaluechange-support","text":"@Composable fun LineChart( data: () -> List<LineData>, modifier: Modifier = Modifier, smoothLineCurve: Boolean = true, showFilledArea: Boolean = false, showLineStroke: Boolean = true, colorConfig: LineChartColorConfig = LineChartColorConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), chartConfig: LineChartConfig = LineChartConfig(), onValueChange: (LineData) -> Unit = {}, )","title":"Version 2: With onValueChange support"},{"location":"charts/line_chart/#parameters","text":"Parameter Type Description data () -> List<LineData> Lambda returning a list of LineData points representing x/y values to be plotted. modifier Modifier Optional Jetpack Compose modifier for layout styling. smoothLineCurve Boolean If true, curves between data points will be smoothly interpolated using B\u00e9zier or spline curves. If false, straight lines are drawn. showFilledArea Boolean If true, the area under the line is filled with gradient or solid color. showLineStroke Boolean If true, a visible line is drawn over the chart representing the data. showOnClickBar Boolean (Only in version 1) If true, shows a vertical indicator when a value is clicked. colorConfig LineChartColorConfig Defines line stroke color, fill color, gradients, and background. labelConfig LabelConfig Manages display and styling of axis or data labels. target Float? Optional horizontal line to show a benchmark or target. targetConfig TargetConfig Configuration of the target line (color, thickness, label, etc). chartConfig LineChartConfig Controls axis visibility, padding, animation, min/max values, etc. onClick (LineData) -> Unit (Only in version 1) Triggered when a data point is clicked. onValueChange (LineData) -> Unit (Only in version 2) Triggered on drag interactions over the line chart.","title":"\ud83d\udd27 Parameters"},{"location":"charts/line_chart/#constraints","text":"require(showFilledArea || showLineStroke) { \"Both showFilledArea and showLineStroke cannot be false at the same time\" } At least one of showFilledArea or showLineStroke must be true, otherwise an IllegalArgumentException is thrown. This ensures the chart is visible.","title":"\u26a0\ufe0f Constraints"},{"location":"charts/line_chart/#data-model","text":"Each data point in the chart is represented by the LineData class: data class LineData( val xValue: Any, val yValue: Float )","title":"\ud83d\udcca Data Model"},{"location":"charts/line_chart/#example-usage","text":"LineChart( data = { listOf( LineData(\"Jan\", 10f), LineData(\"Feb\", 40f), LineData(\"Mar\", 25f) ) }, smoothLineCurve = true, showFilledArea = true, showLineStroke = true, target = 30f, targetConfig = TargetConfig(label = \"Average\"), onClick = { lineData -> println(\"Clicked: ${lineData.xValue} -> ${lineData.yValue}\") } )","title":"\ud83d\udca1 Example Usage"},{"location":"charts/line_stack_bar_chart/","text":"Line Stacked Bar Chart \ud83c\udf78Overview The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart . \ud83e\uddf1 Declaration @Composable fun LineStackedBarChart( data: () -> List<StackBarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), stackBarConfig: StackBarConfig = StackBarConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, StackBarData) -> Unit = { _, _ -> } ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<StackBarData> A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack. modifier Modifier A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target Float? An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig TargetConfig A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig StackBarConfig A StackBarConfig object for configuring chart aspects. Key properties include showCurvedBar , showAxisLines , showGridLines , minimumBarCount . (Optional, defaults to StackBarConfig.default() ) labelConfig LabelConfig A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig BarChartColorConfig A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) onBarClick (Int, StackBarData) -> Unit A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional) \ud83e\uddee StackBarData Model data class StackBarData( val label: String, val values: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label for this stack, displayed on the X-axis. values List<Float> A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors List<ChartColor> A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. You can find a mock implementation in sample module's App file Example Usage @Composable fun SampleLineStackedBarChart() { LineStackedBarChart( data = { data }, target = 100f, modifier = Modifier.fillMaxWidth().height(300.dp).padding(24.dp) ) }","title":"Line Stack Bar Chart"},{"location":"charts/line_stack_bar_chart/#line-stacked-bar-chart","text":"","title":"Line Stacked Bar Chart"},{"location":"charts/line_stack_bar_chart/#overview","text":"The LineStackedBarChart offers a unique way to visualize stacked data. It's a variation of a standard stacked bar chart, but instead of wider bars, each stack is rendered as a thin vertical line composed of multiple segments. This chart is suitable for showing part-to-whole relationships across multiple categories, with a visually lighter footprint than a standard StackedBarChart .","title":"\ud83c\udf78Overview"},{"location":"charts/line_stack_bar_chart/#declaration","text":"@Composable fun LineStackedBarChart( data: () -> List<StackBarData>, modifier: Modifier = Modifier, target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), stackBarConfig: StackBarConfig = StackBarConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), barChartColorConfig: BarChartColorConfig = BarChartColorConfig.default(), onBarClick: (Int, StackBarData) -> Unit = { _, _ -> } )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/line_stack_bar_chart/#parameters","text":"Parameter Type Description data () -> List<StackBarData> A lambda function that returns a list of StackBarData . Each StackBarData object represents a full vertical \"line\" stack. modifier Modifier A Modifier for customizing the layout (e.g., size, padding) of the chart. (Optional) target Float? An optional Float value. If provided, a horizontal line will be drawn at this Y-value on the chart. (Optional) targetConfig TargetConfig A TargetConfig object for configuring the appearance of the target line. (Optional, defaults to TargetConfig.default() ) stackBarConfig StackBarConfig A StackBarConfig object for configuring chart aspects. Key properties include showCurvedBar , showAxisLines , showGridLines , minimumBarCount . (Optional, defaults to StackBarConfig.default() ) labelConfig LabelConfig A LabelConfig object for configuring the appearance of X-axis and Y-axis labels. (Optional, defaults to LabelConfig.default() ) barChartColorConfig BarChartColorConfig A BarChartColorConfig object used here primarily for configuring the colors of axis lines and grid lines. The colors for the stack segments themselves are defined within each StackBarData item. (Optional, defaults to BarChartColorConfig.default() ) onBarClick (Int, StackBarData) -> Unit A lambda function (Int, StackBarData) -> Unit that is invoked when a \"line\" stack is clicked. It receives the index of the clicked stack and the corresponding StackBarData . (Optional)","title":"\ud83d\udd27 Parameters"},{"location":"charts/line_stack_bar_chart/#stackbardata-model","text":"data class StackBarData( val label: String, val values: List<Float>, val colors: List<ChartColor> ) Property Type Description label String The label for this stack, displayed on the X-axis. values List<Float> A list of float values, where each value is a segment in the stack. The height of each segment is proportional to its value relative to the total sum of values in this stack. colors List<ChartColor> A list of ChartColor for each corresponding segment in values . The size of this list should match the values list. You can find a mock implementation in sample module's App file","title":"\ud83e\uddee StackBarData Model"},{"location":"charts/line_stack_bar_chart/#example-usage","text":"@Composable fun SampleLineStackedBarChart() { LineStackedBarChart( data = { data }, target = 100f, modifier = Modifier.fillMaxWidth().height(300.dp).padding(24.dp) ) }","title":"Example Usage"},{"location":"charts/multi_line_chart/","text":"Multi Line Chart Pointed Line Curve Smooth Line Curve \ud83c\udf78Overview A multi-line chart displays multiple series of data points connected by lines. It is particularly useful for comparing trends over time or across different categories for several groups simultaneously. This chart allows for easy visualization of relationships, crossovers, and divergences between different datasets. \ud83e\uddf1 Declaration @Composable fun MultiLineChart( lines: () -> List<LineData>, modifier: Modifier = Modifier, lineConfig: LineConfig = LineConfig.default(), xAxisConfig: XAxisConfig = XAxisConfig.default(), yAxisConfig: YAxisConfig = YAxisConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), onPointClick: (lineIndex: Int, pointIndex: Int, point: PointData) -> Unit = { _, _, _ -> } ) \ud83d\udd27 Parameters Parameter Type Description lines () -> List<LineData> A lambda returning the list of LineData entries. Each LineData defines a separate line with its data points, color, and other properties. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. lineConfig LineConfig Configuration for the appearance of all lines, such as default point visibility, point style, line thickness, and curve rendering (e.g., cubic bezier). Individual LineData properties can override some of these. xAxisConfig XAxisConfig Configuration specific to the X-axis, like label formatting, grid lines, and axis line visibility. yAxisConfig YAxisConfig Configuration specific to the Y-axis, including label formatting, value range, grid lines, and axis line visibility. labelConfig LabelConfig Controls how labels for X and Y axes are rendered (font size, visibility, position, color etc.). onPointClick (lineIndex: Int, pointIndex: Int, point: PointData) -> Unit Lambda called when a data point on a line is clicked. Provides indices for the line and point, and the PointData itself. Default is no-op. \ud83e\uddee Data Models MultiLineData Model data class MultiLineData( val data: List<LineData>, val colorConfig: LineChartColorConfig ) Parameter Type Description data List<LineData> A list of LineData points representing the values to be plotted for this line. colorConfig LineChartColorConfig The color and styling configuration specific to this line, including stroke, fill, gradients, etc. You can find a mock implementation in sample module's App file Example Usage @Composable fun SampleMultiLineChart() { MultiLineChart( modifier = Modifier.fillMaxWidth().height(300.dp).padding(16.dp), lines = { chartLinesData }, labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), lineConfig = LineConfig.default().copy( showPoints = true ), onPointClick = { lineIndex, pointIndex, point -> } ) }","title":"Multi-Line Chart"},{"location":"charts/multi_line_chart/#multi-line-chart","text":"Pointed Line Curve Smooth Line Curve","title":"Multi Line Chart"},{"location":"charts/multi_line_chart/#overview","text":"A multi-line chart displays multiple series of data points connected by lines. It is particularly useful for comparing trends over time or across different categories for several groups simultaneously. This chart allows for easy visualization of relationships, crossovers, and divergences between different datasets.","title":"\ud83c\udf78Overview"},{"location":"charts/multi_line_chart/#declaration","text":"@Composable fun MultiLineChart( lines: () -> List<LineData>, modifier: Modifier = Modifier, lineConfig: LineConfig = LineConfig.default(), xAxisConfig: XAxisConfig = XAxisConfig.default(), yAxisConfig: YAxisConfig = YAxisConfig.default(), labelConfig: LabelConfig = LabelConfig.default(), onPointClick: (lineIndex: Int, pointIndex: Int, point: PointData) -> Unit = { _, _, _ -> } )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/multi_line_chart/#parameters","text":"Parameter Type Description lines () -> List<LineData> A lambda returning the list of LineData entries. Each LineData defines a separate line with its data points, color, and other properties. modifier Modifier Optional Compose Modifier for layout behavior, styling, padding, etc. lineConfig LineConfig Configuration for the appearance of all lines, such as default point visibility, point style, line thickness, and curve rendering (e.g., cubic bezier). Individual LineData properties can override some of these. xAxisConfig XAxisConfig Configuration specific to the X-axis, like label formatting, grid lines, and axis line visibility. yAxisConfig YAxisConfig Configuration specific to the Y-axis, including label formatting, value range, grid lines, and axis line visibility. labelConfig LabelConfig Controls how labels for X and Y axes are rendered (font size, visibility, position, color etc.). onPointClick (lineIndex: Int, pointIndex: Int, point: PointData) -> Unit Lambda called when a data point on a line is clicked. Provides indices for the line and point, and the PointData itself. Default is no-op.","title":"\ud83d\udd27 Parameters"},{"location":"charts/multi_line_chart/#data-models","text":"","title":"\ud83e\uddee Data Models"},{"location":"charts/multi_line_chart/#multilinedata-model","text":"data class MultiLineData( val data: List<LineData>, val colorConfig: LineChartColorConfig ) Parameter Type Description data List<LineData> A list of LineData points representing the values to be plotted for this line. colorConfig LineChartColorConfig The color and styling configuration specific to this line, including stroke, fill, gradients, etc. You can find a mock implementation in sample module's App file","title":"MultiLineData Model"},{"location":"charts/multi_line_chart/#example-usage","text":"@Composable fun SampleMultiLineChart() { MultiLineChart( modifier = Modifier.fillMaxWidth().height(300.dp).padding(16.dp), lines = { chartLinesData }, labelConfig = LabelConfig.default().copy( showXLabel = true, showYLabel = true ), lineConfig = LineConfig.default().copy( showPoints = true ), onPointClick = { lineIndex, pointIndex, point -> } ) }","title":"Example Usage"},{"location":"charts/pie_chart/","text":"PieChart Pointed Line Curve \ud83c\udf78Overview This function displays a Pie Chart using a list of PieChartData slices. It supports rendering either a standard pie chart or a donut-style chart (with a hole in the center). Each slice is interactive and can trigger a click callback. \ud83e\uddf1 Declaration @Composable fun PieChart( data: () -> List<PieChartData>, modifier: Modifier = Modifier, isDonutChart: Boolean = false, onPieChartSliceClick: (PieChartData) -> Unit = {} ) isDonutChart is used to make donut of PieChart \ud83d\udd27 Parameters Parameter Type Description data () -> List<PieChartData> A lambda that returns the list of pie slices to display. Each slice is represented by a PieChartData object. modifier Modifier A Modifier for customizing the layout and appearance of the chart (e.g., size, padding, etc.). isDonutChart Boolean If true , the chart is displayed as a donut (with a circular center cut out). Default is false for a full pie. onPieChartSliceClick (PieChartData) -> Unit Callback invoked when a slice is clicked, providing the clicked PieChartData as a parameter. Useful for interactivity like tooltips or data inspection. \ud83e\uddee PieChartData Model data class PieChartData( val value: Float, val color: ChartColor, val labelColor: ChartColor = Color.White.asSolidChartColor(), val label: String, ) Parameter Type Description value Float The numeric value of the slice. This determines the size (angle) of the slice in the chart. color ChartColor The fill color of the slice. Can be solid or gradient depending on implementation. labelColor ChartColor The color of the text label associated with the slice. Defaults to white ( Color.White ). label String The textual label to display for the slice. Typically shown in or near the slice. You can find a mock implementation in sample module's App file Example Usage @Composable fun SamplePieChart() { PieChart( data = { samplePieData }, isDonutChart = true, onPieChartSliceClick = { slice -> println(\"Clicked: ${slice.label}\") }, modifier = Modifier.size(200.dp) ) }","title":"Pie Chart"},{"location":"charts/pie_chart/#piechart","text":"Pointed Line Curve","title":"PieChart"},{"location":"charts/pie_chart/#overview","text":"This function displays a Pie Chart using a list of PieChartData slices. It supports rendering either a standard pie chart or a donut-style chart (with a hole in the center). Each slice is interactive and can trigger a click callback.","title":"\ud83c\udf78Overview"},{"location":"charts/pie_chart/#declaration","text":"@Composable fun PieChart( data: () -> List<PieChartData>, modifier: Modifier = Modifier, isDonutChart: Boolean = false, onPieChartSliceClick: (PieChartData) -> Unit = {} ) isDonutChart is used to make donut of PieChart","title":"\ud83e\uddf1 Declaration"},{"location":"charts/pie_chart/#parameters","text":"Parameter Type Description data () -> List<PieChartData> A lambda that returns the list of pie slices to display. Each slice is represented by a PieChartData object. modifier Modifier A Modifier for customizing the layout and appearance of the chart (e.g., size, padding, etc.). isDonutChart Boolean If true , the chart is displayed as a donut (with a circular center cut out). Default is false for a full pie. onPieChartSliceClick (PieChartData) -> Unit Callback invoked when a slice is clicked, providing the clicked PieChartData as a parameter. Useful for interactivity like tooltips or data inspection.","title":"\ud83d\udd27 Parameters"},{"location":"charts/pie_chart/#piechartdata-model","text":"data class PieChartData( val value: Float, val color: ChartColor, val labelColor: ChartColor = Color.White.asSolidChartColor(), val label: String, ) Parameter Type Description value Float The numeric value of the slice. This determines the size (angle) of the slice in the chart. color ChartColor The fill color of the slice. Can be solid or gradient depending on implementation. labelColor ChartColor The color of the text label associated with the slice. Defaults to white ( Color.White ). label String The textual label to display for the slice. Typically shown in or near the slice. You can find a mock implementation in sample module's App file","title":"\ud83e\uddee PieChartData Model"},{"location":"charts/pie_chart/#example-usage","text":"@Composable fun SamplePieChart() { PieChart( data = { samplePieData }, isDonutChart = true, onPieChartSliceClick = { slice -> println(\"Clicked: ${slice.label}\") }, modifier = Modifier.size(200.dp) ) }","title":"Example Usage"},{"location":"charts/point_chart/","text":"PointChart Point Chart Preview \ud83c\udf78Overview Renders a point chart where each data point is plotted on a 2D axis, useful for visualizing discrete data points without connecting lines. \ud83e\uddf1 Declaration @Composable fun PointChart( data: () -> List<PointData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), colorConfig: PointChartColorConfig = PointChartColorConfig.default(), chartConfig: PointChartConfig = PointChartConfig(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), onPointClick: (Int, PointData) -> Unit = { _, _ -> } ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<PointData> Lambda returning the list of data points to plot. Each PointData contains the position and optional visual settings. modifier Modifier Modifier to control layout, size, and gestures. labelConfig LabelConfig Configuration for axis labels and styling. colorConfig PointChartColorConfig Defines color configuration for points, axes, and grid. chartConfig PointChartConfig Visual and animation configuration for the chart (see below). target Float? Optional target line (e.g. goal threshold) shown on the chart. targetConfig TargetConfig Styling for the optional target line. onPointClick (Int, PointData) -> Unit Callback when a point is tapped. Provides index and data point. \ud83d\udcca Data Model PointData Each data point in the chart is represented by the PointData class: data class PointData( val yValue: Float, val xValue: Any, ) \u2699\ufe0f PointChartConfig Configuration options for customizing the appearance and animation of a PointChart. data class PointChartConfig( val axisLineWidth: Float = 2f, val gridLineWidth: Float = 1f, val circleRadius: Float = 10f, val showClickedBar: Boolean = true, val animationDurationMillis: Int = 500, val animationEasing: Easing = LinearEasing, val animatePoints: Boolean = true, val gridLinePathEffect: PathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f), 0f), ) Parameter Type Description axisLineWidth Float Width of the X and Y axis lines. gridLineWidth Float Width of the horizontal/vertical grid lines. circleRadius Float Radius of each plotted point on the chart. showClickedBar Boolean Whether to visually highlight the selected/clicked point. animationDurationMillis Int Duration of the entry animation for points. animationEasing Easing The easing function used during animation. animatePoints Boolean If true, points animate when the chart is first drawn. gridLinePathEffect PathEffect The pattern used for drawing grid lines, default is dashed lines. \ud83d\udca1 Example Usage PointChart( data = { data }, target = 18f, colorConfig = PointChartColorConfig.default(), chartConfig = PointChartConfig(circleRadius = 20F), modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), onPointClick = { index, circleData -> } )","title":"Point Chart"},{"location":"charts/point_chart/#pointchart","text":"Point Chart Preview","title":"PointChart"},{"location":"charts/point_chart/#overview","text":"Renders a point chart where each data point is plotted on a 2D axis, useful for visualizing discrete data points without connecting lines.","title":"\ud83c\udf78Overview"},{"location":"charts/point_chart/#declaration","text":"@Composable fun PointChart( data: () -> List<PointData>, modifier: Modifier = Modifier, labelConfig: LabelConfig = LabelConfig.default(), colorConfig: PointChartColorConfig = PointChartColorConfig.default(), chartConfig: PointChartConfig = PointChartConfig(), target: Float? = null, targetConfig: TargetConfig = TargetConfig.default(), onPointClick: (Int, PointData) -> Unit = { _, _ -> } )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/point_chart/#parameters","text":"Parameter Type Description data () -> List<PointData> Lambda returning the list of data points to plot. Each PointData contains the position and optional visual settings. modifier Modifier Modifier to control layout, size, and gestures. labelConfig LabelConfig Configuration for axis labels and styling. colorConfig PointChartColorConfig Defines color configuration for points, axes, and grid. chartConfig PointChartConfig Visual and animation configuration for the chart (see below). target Float? Optional target line (e.g. goal threshold) shown on the chart. targetConfig TargetConfig Styling for the optional target line. onPointClick (Int, PointData) -> Unit Callback when a point is tapped. Provides index and data point.","title":"\ud83d\udd27 Parameters"},{"location":"charts/point_chart/#data-model","text":"","title":"\ud83d\udcca Data Model"},{"location":"charts/point_chart/#pointdata","text":"Each data point in the chart is represented by the PointData class: data class PointData( val yValue: Float, val xValue: Any, )","title":"PointData"},{"location":"charts/point_chart/#pointchartconfig","text":"Configuration options for customizing the appearance and animation of a PointChart. data class PointChartConfig( val axisLineWidth: Float = 2f, val gridLineWidth: Float = 1f, val circleRadius: Float = 10f, val showClickedBar: Boolean = true, val animationDurationMillis: Int = 500, val animationEasing: Easing = LinearEasing, val animatePoints: Boolean = true, val gridLinePathEffect: PathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f), 0f), ) Parameter Type Description axisLineWidth Float Width of the X and Y axis lines. gridLineWidth Float Width of the horizontal/vertical grid lines. circleRadius Float Radius of each plotted point on the chart. showClickedBar Boolean Whether to visually highlight the selected/clicked point. animationDurationMillis Int Duration of the entry animation for points. animationEasing Easing The easing function used during animation. animatePoints Boolean If true, points animate when the chart is first drawn. gridLinePathEffect PathEffect The pattern used for drawing grid lines, default is dashed lines.","title":"\u2699\ufe0f PointChartConfig"},{"location":"charts/point_chart/#example-usage","text":"PointChart( data = { data }, target = 18f, colorConfig = PointChartColorConfig.default(), chartConfig = PointChartConfig(circleRadius = 20F), modifier = Modifier.padding(10.dp).fillMaxWidth().height(300.dp), onPointClick = { index, circleData -> } )","title":"\ud83d\udca1 Example Usage"},{"location":"charts/signal_bar_chart/","text":"\ud83d\udcf6 SignalProgressBarChart \ud83c\udf78Overview A simple signal-style bar chart that displays progress using vertically stacked blocks. Visually resembles mobile network signal indicators. \ud83e\uddf1 Declaration @Composable fun SignalProgressBarChart( progress: () -> Float, maxProgress: Float = 100F, modifier: Modifier = Modifier, totalBlocks: Int = 10, trackColor: ChartColor = Color.Gray.asSolidChartColor(), progressColor: ChartColor = Color.Green.asSolidChartColor(), gapRatio: Float = 0.1F ) \ud83d\udd27 Parameters Parameter Type Description progress () -> Float Lambda returning the current progress value. maxProgress Float Maximum possible progress. Default is 100f . modifier Modifier Modifier to customize layout, size, gesture, etc. totalBlocks Int Total number of vertical blocks in the chart. trackColor ChartColor Color of the unfilled (track) blocks. progressColor ChartColor Color of the filled (progress) blocks. gapRatio Float Fraction of space between each block relative to its height (0.1 = 10% gap). \ud83d\udca1 Notes The blocks fill vertically from bottom to top based on progress / maxProgress . Useful for visual indicators such as signal strength , step completion , or tiered progress . The gapRatio allows customization of spacing between blocks for a tighter or more spaced-out look. You can pass a dynamic progress lambda to animate or update progress in real time. \ud83d\udccc Example SignalProgressBarChart( progress = { 40f }, maxProgress = 100f, totalBlocks = 5, progressColor = Color.Blue.asSolidChartColor(), trackColor = Color.LightGray.asSolidChartColor(), gapRatio = 0.15f )","title":"Signal Bar Chart"},{"location":"charts/signal_bar_chart/#signalprogressbarchart","text":"","title":"\ud83d\udcf6 SignalProgressBarChart"},{"location":"charts/signal_bar_chart/#overview","text":"A simple signal-style bar chart that displays progress using vertically stacked blocks. Visually resembles mobile network signal indicators.","title":"\ud83c\udf78Overview"},{"location":"charts/signal_bar_chart/#declaration","text":"@Composable fun SignalProgressBarChart( progress: () -> Float, maxProgress: Float = 100F, modifier: Modifier = Modifier, totalBlocks: Int = 10, trackColor: ChartColor = Color.Gray.asSolidChartColor(), progressColor: ChartColor = Color.Green.asSolidChartColor(), gapRatio: Float = 0.1F )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/signal_bar_chart/#parameters","text":"Parameter Type Description progress () -> Float Lambda returning the current progress value. maxProgress Float Maximum possible progress. Default is 100f . modifier Modifier Modifier to customize layout, size, gesture, etc. totalBlocks Int Total number of vertical blocks in the chart. trackColor ChartColor Color of the unfilled (track) blocks. progressColor ChartColor Color of the filled (progress) blocks. gapRatio Float Fraction of space between each block relative to its height (0.1 = 10% gap).","title":"\ud83d\udd27 Parameters"},{"location":"charts/signal_bar_chart/#notes","text":"The blocks fill vertically from bottom to top based on progress / maxProgress . Useful for visual indicators such as signal strength , step completion , or tiered progress . The gapRatio allows customization of spacing between blocks for a tighter or more spaced-out look. You can pass a dynamic progress lambda to animate or update progress in real time.","title":"\ud83d\udca1 Notes"},{"location":"charts/signal_bar_chart/#example","text":"SignalProgressBarChart( progress = { 40f }, maxProgress = 100f, totalBlocks = 5, progressColor = Color.Blue.asSolidChartColor(), trackColor = Color.LightGray.asSolidChartColor(), gapRatio = 0.15f )","title":"\ud83d\udccc Example"},{"location":"charts/speedometer_progress_bar/","text":"\ud83e\udded SpeedometerProgressBar \ud83c\udf78Overview A circular speedometer-style progress bar with animated progress, customizable colors, arc dots, and center text. Ideal for dashboards, gauges, or motivational UI components. \ud83e\uddf1 Declaration @Composable fun SpeedometerProgressBar( progress: () -> Float, title: String, color: ChartColor, progressIndicatorColor: ChartColor, trackColor: ChartColor, modifier: Modifier = Modifier, dotConfig: DotConfig = DotConfig.default(), titleTextConfig: TextConfig = TextConfig.default(), subTitleTextConfig: TextConfig = TextConfig.default(fontSize = 20.sp), ) \ud83d\udd27 Parameters Parameter Type Description progress () -> Float Lambda returning progress between 0f and 1f . title String Text shown at the center of the speedometer. color ChartColor Color of the progress arc. progressIndicatorColor ChartColor Color of the indicator circle on the arc. trackColor ChartColor Color of the background arc (track). modifier Modifier Modifier for size, padding, and gesture handling. dotConfig DotConfig Configuration for arc dots (size, count, spacing). titleTextConfig TextConfig Typography for the main title text. subTitleTextConfig TextConfig Typography for optional subtitle or progress info. \u2728 Features \ud83c\udf00 Smooth animated arc indicating progress. \ud83d\udfe2 Optional indicator dot moves with progress. \ud83d\udd18 Decorative dots along the arc using DotConfig . \ud83d\udd24 Centered title + subtitle text using TextConfig . \ud83d\udd04 Fully customizable using modifiers and color configs. \ud83d\udccc Example SpeedometerProgressBar( progress = { 0.65f }, title = \"65%\", color = Color.Green.asSolidChartColor(), progressIndicatorColor = Color.Black.asSolidChartColor(), trackColor = Color.LightGray.asSolidChartColor(), dotConfig = DotConfig(count = 30), titleTextConfig = TextConfig(fontSize = 24.sp, fontWeight = FontWeight.Bold), subTitleTextConfig = TextConfig(fontSize = 14.sp, color = Color.Gray) )","title":"Speedometer ProgressBar"},{"location":"charts/speedometer_progress_bar/#speedometerprogressbar","text":"","title":"\ud83e\udded SpeedometerProgressBar"},{"location":"charts/speedometer_progress_bar/#overview","text":"A circular speedometer-style progress bar with animated progress, customizable colors, arc dots, and center text. Ideal for dashboards, gauges, or motivational UI components.","title":"\ud83c\udf78Overview"},{"location":"charts/speedometer_progress_bar/#declaration","text":"@Composable fun SpeedometerProgressBar( progress: () -> Float, title: String, color: ChartColor, progressIndicatorColor: ChartColor, trackColor: ChartColor, modifier: Modifier = Modifier, dotConfig: DotConfig = DotConfig.default(), titleTextConfig: TextConfig = TextConfig.default(), subTitleTextConfig: TextConfig = TextConfig.default(fontSize = 20.sp), )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/speedometer_progress_bar/#parameters","text":"Parameter Type Description progress () -> Float Lambda returning progress between 0f and 1f . title String Text shown at the center of the speedometer. color ChartColor Color of the progress arc. progressIndicatorColor ChartColor Color of the indicator circle on the arc. trackColor ChartColor Color of the background arc (track). modifier Modifier Modifier for size, padding, and gesture handling. dotConfig DotConfig Configuration for arc dots (size, count, spacing). titleTextConfig TextConfig Typography for the main title text. subTitleTextConfig TextConfig Typography for optional subtitle or progress info.","title":"\ud83d\udd27 Parameters"},{"location":"charts/speedometer_progress_bar/#features","text":"\ud83c\udf00 Smooth animated arc indicating progress. \ud83d\udfe2 Optional indicator dot moves with progress. \ud83d\udd18 Decorative dots along the arc using DotConfig . \ud83d\udd24 Centered title + subtitle text using TextConfig . \ud83d\udd04 Fully customizable using modifiers and color configs.","title":"\u2728 Features"},{"location":"charts/speedometer_progress_bar/#example","text":"SpeedometerProgressBar( progress = { 0.65f }, title = \"65%\", color = Color.Green.asSolidChartColor(), progressIndicatorColor = Color.Black.asSolidChartColor(), trackColor = Color.LightGray.asSolidChartColor(), dotConfig = DotConfig(count = 30), titleTextConfig = TextConfig(fontSize = 24.sp, fontWeight = FontWeight.Bold), subTitleTextConfig = TextConfig(fontSize = 14.sp, color = Color.Gray) )","title":"\ud83d\udccc Example"},{"location":"charts/stack_bar_chart/","text":"\ud83d\udcca StackedBarChart \ud83c\udf78Overview A bar that renders a horizontal storage bar, where each segment represents a portion of total usage (like memory, disk, or category breakdowns). The segments are color-coded and interactive. \ud83e\uddf1 Declaration @Composable fun StorageBar( data: () -> List<StorageData>, trackColor: ChartColor = Color(0xD3D3D3DE).asSolidChartColor(), modifier: Modifier = Modifier, onClick: (StorageData) -> Unit = {} ) \ud83d\udd27 Parameters Parameter Type Description data () -> List<StorageData> Lambda returning a list of segments. Each segment contains a value and category info. trackColor ChartColor The background track color behind all segments. Defaults to light gray. modifier Modifier Modifier for layout and styling customization. onClick (StorageData) -> Unit Callback triggered when a segment is tapped. Provides the corresponding StorageData . \ud83d\udcca Data Model StorageData consists of multiple segments: data class StorageData( val label: String, val value: Float, val color: ChartColor ) label: The category name (e.g., \"Photos\", \"Apps\"). value: Proportional value for this segment. color: The color representing this category in the bar. \u2728 Features \ud83d\udcca Proportional segments based on total value. \ud83c\udfa8 Custom color for each segment. \ud83d\uddb1\ufe0f Interactive \u2014 tap on a segment to receive the related StorageData . \ud83c\udf9a\ufe0f Full-width visual indicator bar with background track color. \ud83d\udccc Example StorageBar( data = { listOf( StorageData(\"Photos\", 40f, Color.Blue.asSolidChartColor()), StorageData(\"Apps\", 30f, Color.Red.asSolidChartColor()), StorageData(\"Other\", 30f, Color.Gray.asSolidChartColor()) ) }, trackColor = Color.LightGray.asSolidChartColor(), onClick = { segment -> println(\"Clicked: ${segment.label}\") } )","title":"Stack Bar Chart"},{"location":"charts/stack_bar_chart/#overview","text":"A bar that renders a horizontal storage bar, where each segment represents a portion of total usage (like memory, disk, or category breakdowns). The segments are color-coded and interactive.","title":"\ud83c\udf78Overview"},{"location":"charts/stack_bar_chart/#declaration","text":"@Composable fun StorageBar( data: () -> List<StorageData>, trackColor: ChartColor = Color(0xD3D3D3DE).asSolidChartColor(), modifier: Modifier = Modifier, onClick: (StorageData) -> Unit = {} )","title":"\ud83e\uddf1 Declaration"},{"location":"charts/stack_bar_chart/#parameters","text":"Parameter Type Description data () -> List<StorageData> Lambda returning a list of segments. Each segment contains a value and category info. trackColor ChartColor The background track color behind all segments. Defaults to light gray. modifier Modifier Modifier for layout and styling customization. onClick (StorageData) -> Unit Callback triggered when a segment is tapped. Provides the corresponding StorageData .","title":"\ud83d\udd27 Parameters"},{"location":"charts/stack_bar_chart/#data-model","text":"StorageData consists of multiple segments: data class StorageData( val label: String, val value: Float, val color: ChartColor ) label: The category name (e.g., \"Photos\", \"Apps\"). value: Proportional value for this segment. color: The color representing this category in the bar.","title":"\ud83d\udcca Data Model"},{"location":"charts/stack_bar_chart/#features","text":"\ud83d\udcca Proportional segments based on total value. \ud83c\udfa8 Custom color for each segment. \ud83d\uddb1\ufe0f Interactive \u2014 tap on a segment to receive the related StorageData . \ud83c\udf9a\ufe0f Full-width visual indicator bar with background track color.","title":"\u2728 Features"},{"location":"charts/stack_bar_chart/#example","text":"StorageBar( data = { listOf( StorageData(\"Photos\", 40f, Color.Blue.asSolidChartColor()), StorageData(\"Apps\", 30f, Color.Red.asSolidChartColor()), StorageData(\"Other\", 30f, Color.Gray.asSolidChartColor()) ) }, trackColor = Color.LightGray.asSolidChartColor(), onClick = { segment -> println(\"Clicked: ${segment.label}\") } )","title":"\ud83d\udccc Example"},{"location":"charts/storage_bar/","text":"\ud83e\uddee StorageBar Overview A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values. Usage Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Storage Bar"},{"location":"charts/storage_bar/#overview","text":"A composable function that displays a storage bar. This type of chart is typically used to visualize proportions of a whole, such as disk space usage where different categories (e.g., photos, apps, documents) consume parts of the total storage. The segments are laid out horizontally, and their widths are proportional to their values.","title":"Overview"},{"location":"charts/storage_bar/#usage","text":"Key parameters for using this chart: data : A lambda function that returns a list of StorageData . Each StorageData object represents a segment in the bar and should contain: value : A Float representing the proportion or amount of this segment relative to others. The actual width will be calculated based on the sum of all values. color : A ChartColor for this segment. trackColor : The ChartColor for the unfilled portion of the bar, displayed if the sum of the value properties in data does not fill the entire available width. (Optional, defaults to Color(0xD3D3D3DE) ) modifier : A Modifier for customizing the layout or drawing behavior of the chart, typically used to set its height, as the width is often fillMaxWidth . (Optional) onClick : A lambda function that is invoked when a segment of the bar is clicked. It receives the StorageData of the clicked segment. (Optional) The corners of the first and last segments can be rounded. Clicking a segment can also slightly increase its height for emphasis.","title":"Usage"}]}